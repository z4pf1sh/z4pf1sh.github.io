{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"2023/12/31/hello/","title":"Hello","text":"<p>Congratulations, you have found The Depths, where a mysterious carbon-based life resides and occasionally produces some random information with random entropy.</p> <p>OK, so, apparently, you would like to learn more. Here is some information you can refer to.</p>"},{"location":"2023/12/31/hello/#questions","title":"Questions","text":""},{"location":"2023/12/31/hello/#what-is-the-main-language-of-the-site","title":"What is the main language of the site?","text":"<p>Apparently English, I am not 100% sure of which variant<sup>1</sup> but English anyways. But do expect some posts in Chinese, feel free to ignore those you cannot read.</p>"},{"location":"2023/12/31/hello/#what-should-i-expect","title":"What should I expect?","text":"<p>Anything fancy enough to show the public. Contents may not be 100% accurate or objective.</p>"},{"location":"2023/12/31/hello/#are-there-some-specific-topics","title":"Are there some specific topics?","text":"<p>The Depths will be a place that is more technology-focused.</p>"},{"location":"2023/12/31/hello/#when-will-there-be-any-updates","title":"When will there be any updates?","text":"<p>Like mentioned above, totally random.</p>"},{"location":"2023/12/31/hello/#will-there-be-ads","title":"Will there be ads?","text":"<p>No. I do not live off this site. Nor do I want to disgust you with ads, which small site owners usually have very limited control over, or enable advertisers to track you to one of the most remote edges of the Internet, namely The Depths.</p> <p>Or maybe better, use Firefox , so as to make it a little harder for greedy corporations to profile you on the Internet. Also serves as props to open-source initiatives like Mozilla and an elegant middle finger towards advertisers.</p>"},{"location":"2023/12/31/hello/#what-was-this-site-built-with","title":"What was this site built with?","text":"<p>See the footer, it is mkdocs-material . I personally invite you to give it a star, it\u2019s awesome.</p>"},{"location":"2023/12/31/hello/#why-did-not-you-use-alternatives-like-hexo-or-jekyll","title":"Why did not you use alternatives like Hexo or Jekyll?","text":"<p>It has got complete features for blogging and advanced formatting. Plus, I personally find it ironic that Google<sup>2</sup> themselves are no longer doing Material Design right. Heck, even Microsoft\u2019s latest Fluent Design is heavily inspired by Google. Just look at the hamburger menu!</p> <p>If you miss the good old Material days, visit m1.material.io .</p>"},{"location":"2023/12/31/hello/#your-site-logo-is-ugly","title":"Your site logo is ugly.","text":"<p>This is apparently not a question but thanks for not using worse words anyways.</p>"},{"location":"2023/12/31/hello/#how-do-i-show-support","title":"How do I show support?","text":"<p>Thanks! If any of the contents of the site helped you, you can show your support by starring the GitHub repository behind this site.</p> <p>Although stars for repositories are free, your time spent starring the repository is not. So thanks again.</p>"},{"location":"2023/12/31/hello/#my-question-is-not-on-the-list-will-it-be-answered","title":"My question is not on the list! Will it be answered?","text":"<p>You bet. Since the whole site is hosted on GitHub Pages, feel free to open issues regarding your question, as long as you stay civil and follow the basic rules.</p> <p>Please bear in mind that there may not be guaranteed replies to your inquiries.</p>"},{"location":"2023/12/31/hello/#privacy-policy","title":"Privacy Policy","text":"<p>In order to comply with regulations, a simple Privacy Policy was put together and posted here.</p> <p>The TL;DR is that we, the site maintainers do not collect any data from you. Therefore there is no way for us to share or sell your data. Even if we did somehow collect your information, we would not share or sell it anyways.</p> <p>The Privacy Policy may be updated without prior notifications.</p> <p>The service provider of this site is GitHub Pages by GitHub, Inc., a subsidiary of Microsoft Corporation. You may refer to About GitHub Pages  Data collection  for more information.</p> <p>Google Fonts  hosted by Google LLC provides fonts delivery for this site. You may refer to Google Fonts  Privacy and Data Collection  for more information.</p>"},{"location":"2023/12/31/hello/#trademark-notices","title":"Trademark notices","text":"<p>Contents on this website may include trademarks registered in the U.S. and/or other countries and regions. For referral purposes only, as they remain sole properties of their respective owners.</p> <ol> <li> <p>Definitely not British, you will NOT see words like \"programme\" and \"aluminium\" here.\u00a0\u21a9</p> </li> <li> <p>Google, Inc. used to be my favorite company, but never for Google LLC.\u00a0\u21a9</p> </li> </ol>"},{"location":"2024/01/01/640-k-%E4%B9%8B%E5%A2%99/","title":"640 K \u4e4b\u5899","text":""},{"location":"2024/01/01/640-k-%E4%B9%8B%E5%A2%99/#_1","title":"\u8bd1\u6ce8","text":"<p>\u672c\u6587\u8bd1\u81ea The 640 K Barrier - The Digital Antiquarian \uff08\u5b58\u6863\u4e8e\u4e92\u8054\u7f51\u6863\u6848\u9986\uff09\uff0c\u539f\u8457\u65f6\u95f4 2017 \u5e74 4 \u6708\u3002\u4e2a\u4eba\u7ffb\u8bd1\uff0c\u5982\u6709\u6c34\u5e73\u4e0d\u7cbe\u4e4b\u5904\uff0c\u656c\u8bf7\u7406\u89e3\u3002</p> <p>\u56de\u987e IBM PC \u7684\u53d1\u5c55\u5386\u53f2\u3001MS-DOS \u548c\u82f1\u7279\u5c14\u7684\u7231\u6068\u60c5\u4ec7\uff0c\u672c\u7bc7\u6587\u7ae0\u5c06\u5411\u4f60\u8bb2\u8ff0\u4e00\u6bb5\u7cbe\u5f69\u7684\u5386\u53f2\u6545\u4e8b\u3002</p>"},{"location":"2024/01/01/640-k-%E4%B9%8B%E5%A2%99/#_2","title":"\u6b63\u6587","text":""},{"location":"2024/01/01/640-k-%E4%B9%8B%E5%A2%99/#_3","title":"\u524d\u8a00","text":"<p>\u5728\u5185\u5b58\u91cc\u4f4f\u7740\u4e00\u53ea\u6076\u9b54\u3002\u4f20\u8a00\u4efb\u4f55\u6311\u6218\u5b83\u7684\u4eba\u90fd\u4e00\u8d25\u6d82\u5730\uff0c\u4ed6\u4eec\u7684\u7a0b\u5e8f\u4f1a\u9501\u6b7b\uff0c\u4ed6\u4eec\u7684\u673a\u5668\u4f1a\u5d29\u6e83\uff0c\u4ed6\u4eec\u7684\u6570\u636e\u4f1a\u635f\u6bc1\u3002</p> <p>\u8fd9\u53ea\u6076\u9b54\u4f4f\u5728\u5341\u516d\u8fdb\u5236\u5185\u5b58\u5730\u5740 <code>A0000</code>\uff0c\u5341\u8fdb\u5236\u7684 <code>655,360</code>\uff0c\u8d85\u51fa\u6b64\u5730\uff0c\u518d\u65e0\u5185\u5b58\u5206\u914d\u4e4b\u673a\u9047\u3002\u5b83\u4f4f\u5728\u4f20\u8a00\u6ca1\u6709\u4efb\u4f55\u7a0b\u5e8f\u53ef\u4ee5\u903e\u8d8a\u7684\u5730\u65b9\u3002\u4eba\u4eec\u79f0\u4e4b\u4e3a\u201c640K \u4e4b\u5899\u201d\u3002</p> <p>\u2014\u2014 \u4e0d\u597d\u610f\u601d\uff0c\u300a\u592a\u7a7a\u5148\u950b\u300b<sup>1</sup>\u2026\u2026</p> <p>\u521d\u4ee3 IBM PC \u4f7f\u5f97\u7f8e\u56fd\u516c\u53f8\u9996\u6b21\u5bf9\u4e2a\u4eba\u8ba1\u7b97\u8db3\u4ee5\u653e\u5fc3\uff0c\u4f46\u5728\u5b83 1981 \u5e74 8 \u6708\u53d1\u552e\u4ee5\u6765\u7684\u6570\u5341\u5e74\u95f4\uff0c\u70ed\u95e8\u7684\u201c\u6280\u672f\u884c\u5bb6\u201d\u4eec\u4fbf\u4e00\u76f4\u5728\u8fc7\u5ea6\u5ba3\u626c\u5176\u662f\u201c\u5306\u5fd9\u4e4b\u4e2d\u62fc\u51d1\u800c\u751f\u7684\u6298\u8877\u4ea7\u54c1\u201d\u3002\u65e0\u8bba\u5b83\u7684\u521b\u9020\u8005\u4eec\u5230\u5e95\u8981\u9762\u5bf9\u600e\u6837\u7684\u65f6\u95f4\u548c\u9884\u7b97\u9650\u5236\uff0c\u5728\u4ed6\u4eec\u6240\u4f5c\u51fa\u7684\u51b3\u7b56\u80cc\u540e\uff0c\u662f\u4e00\u5957\u6e05\u6670\u7684\u8bbe\u8ba1\u539f\u5219\uff0c\u800c\u4e0d\u662f\u7b80\u7b80\u5355\u5355\u5730\u4f7f\u51fa\u201c\u8d76\u9e2d\u5b50\u4e0a\u67b6\uff0c\u8d8a\u5feb\u8d8a\u597d\uff0c\u5728\u5176\u4ed6\u5c0f\u516c\u53f8\u5272\u8d70\u81ea\u5df1\u7684\u86cb\u7cd5\u4e4b\u524d\u62a2\u5148\u4e00\u6b65\u63a8\u4e0a\u5e02\u573a\u201d\u7684\u6218\u672f\u3002\u4f5c\u4e3a\u4e00\u79cd\u8bbe\u8ba1\uff0cIBM PC \u503e\u5411\u4e8e\u53ef\u9760\u6027\u3001\u6301\u4e45\u6027\u548c\u53ef\u6269\u5c55\u6027\uff0c\u8fd9\u4e9b\u90fd\u662f IBM \u5728\u591a\u5e74\u6765\u548c\u653f\u5e9c\u4e0e\u4f01\u4e1a\u6253\u4ea4\u9053\u3001\u4e3a\u5176\u6700\u91cd\u8981\u7684\u6570\u636e\u5904\u7406\u9700\u6c42\u63d0\u4f9b\u5927\u578b\u89e3\u51b3\u65b9\u6848\u603b\u7ed3\u800c\u51fa\u7684\u7ecf\u9a8c\u3002\u82e5\u8981\u9886\u4f1a IBM \u65b9\u6cd5\u7684\u667a\u6167\uff0c\u53ea\u9700\u8981\u770b\u770b\u73b0\u5728\uff0c\u5728 Commodore Amiga \u548c Apple \u9ea6\u91d1\u5854\uff08Macintosh\uff09\u67b6\u6784\u90fd\u65e9\u5df2\u6210\u4e3a\u5386\u53f2\u4e4b\u540e\uff08\u4ed6\u4eec\u7684\u7528\u6237\u8fd8\u5f88\u559c\u6b22\u5632\u7b11 IBM \u7684\u201c\u67af\u71e5\u65e0\u5473\u7684\u7c73\u9ec4\u8272\u76d2\u5b50\u201d\uff09\uff0c\u6211\u4eec\u7684\u5927\u591a\u6570\u7b14\u8bb0\u672c\u548c\u53f0\u5f0f\u7535\u8111\uff08\u5305\u62ec\u73b0\u4ee3 Mac<sup>2</sup>\uff09\u4e4b\u4e2d\u7684\u786c\u4ef6\u90fd\u8fd8\u53ef\u4ee5\u8ffd\u6eaf\u5230\u4e00\u4e2a\u5728\u4f4d\u4e8e\u4f5b\u7f57\u91cc\u8fbe\u5dde\u535a\u5361\u62c9\u987f\uff08Boca Raton\uff09\u7684 IBM \u5206\u652f\u529e\u516c\u5ba4\u7684\u4e00\u4e2a\u7531\u4e00\u7fa4\u4e0d\u592a\u9002\u5408\u5546\u4e1a\u4f46\u5bcc\u6709\u8fdc\u89c1\u7684\u4eba\u7ec4\u6210\u7684\u5c0f\u56e2\u961f\u3002</p> <p>\u4f46\u662f\u518d\u6709\u8fdc\u89c1\u4e5f\u4e0d\u53ef\u80fd\u51c6\u786e\u9884\u6d4b\u4e00\u5207<sup>3</sup>\u3002\u5c3d\u7ba1 IBM PC \u5f3a\u5927\u5982\u6b64\uff0c\u5728\u4e00\u4e2a\u9886\u57df\uff0c\u6765\u81ea\u90a3\u4e9b\u7528\u7740\u66f4\u70ab\u7684\u673a\u5668\u7684\u4eba\u4eec\u7684\u6240\u6709\u5632\u7b11\u90fd\u53ea\u80fd\u7b97\u662f\u6d3b\u8be5\u3002\u8fd9\u4e2a\u81f4\u547d\u5f31\u70b9\u5e76\u4e0d\u4e3b\u8981\u662f\u56e0\u4e3a\u7b2c\u4e00\u53f0 IBM PC \u7684\u786c\u4ef6\uff0c\u800c\u66f4\u591a\u662f\u5e02\u573a\u9009\u62e9\u5728\u5176\u4e0a\u8fd0\u884c\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\u5b83\u8ba9\u5f00\u53d1\u4eba\u5458\u548c\u666e\u901a\u7528\u6237\u5728\u63a5\u4e0b\u6765\u7684\u4e8c\u5341\u5e74\u95f4\u6320\u816e\u64a7\u8033\uff0c\u76f4\u5230 2001 \u5e74\u5fae\u8f6f\u53d1\u5e03 Windows XP \u65f6\uff0c\u624d\u968f\u7740 MS-DOS \u795e\u8bdd\u7684\u5728\u4e3b\u6d41\u8ba1\u7b97\u4e2d\u7684\u7ec8\u7ed3\u800c\u6de1\u53bb\u3002MS-DOS \u8fd9\u4e2a\u5728\u5f00\u53d1\u65e9\u671f\u6709\u7740\u201c\u5feb\u800c\u810f\u201d\u7684\u7ef0\u53f7\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u53ef\u80fd\u662f\u8ba1\u7b97\u673a\u53f2\u4e0a\u201c\u603b\u5f00\u53d1\u5c0f\u65f6\u6570/\u603b\u4f7f\u7528\u5c0f\u65f6\u6570\uff08\u5728\u6570\u767e\u4e07\u8ba1\u7684\u7535\u8111\u4e0a\uff09\u201d\u5bf9\u6bd4\u6700\u9c9c\u660e\u7684\u8f6f\u4ef6\u3002\u800c 640K \u4e4b\u5899\uff0c\u8fd9\u4e2a\u6240\u6709\u7528\u6237\u6b9a\u7cbe\u7aed\u8651\u5bf9\u6297\u7684\u6076\u9b54\uff0c\u53ea\u662f\u7f8e\u56fd\u4f01\u4e1a\u91c7\u7eb3 MS-DOS \u8fd9\u4e2a\u534a\u6210\u54c1\u4f5c\u4e3a\u6807\u51c6\u7684\u540e\u679c\u91cc\u66f4\u663e\u773c\u7684\u90a3\u4e2a\u7f62\u4e86\u3002\u4eca\u5929\uff0c\u6211\u4eec\u5c06\u89e3\u8bfb\u8fd9\u4e2a\u95ee\u9898\uff1aMS-DOS \u7684\u5185\u5b58\u7ba1\u7406\u3002\u6211\u4eec\u8fd8\u4f1a\u5206\u6790\u4e94\u82b1\u516b\u95e8\u7684\u89e3\u51b3\u65b9\u6848\u2014\u2014\u591a\u5c11\u90fd\u6709\u70b9\u4e11\u964b\u548c\u4e0d\u5b8c\u7f8e\u3002</p>"},{"location":"2024/01/01/640-k-%E4%B9%8B%E5%A2%99/#8088-1-mib","title":"8088 \u548c 1 MiB","text":"<p>\u521d\u4ee3 IBM PC \u4f7f\u7528\u4e86\u4e00\u9897 Intel 8088 \u5904\u7406\u5668\uff0c8086\uff08\u4e00\u4e2a\u66f4\u8001\u7684\u82af\u7247\uff09\u7684\u4f4e\u914d\u3001\u4f4e\u6210\u672c\u7248\u672c\uff08IBM \u9009\u62e9 8088 \u800c\u4e0d\u662f 8086 \u7684\u51b3\u5b9a\u5c06\u5bf9\u8fd9\u53f0\u548c\u672a\u6765\u673a\u5668\u7684\u6269\u5c55\u603b\u7ebf\u9020\u6210\u91cd\u5927\u5f71\u54cd\uff0c\u4f46\u5bf9\u6211\u4eec\u4eca\u5929\u6240\u8bf4\u7684\u4e8b\u6765\u8bf4\uff0c\u4e24\u9897\u82af\u7247\u7684\u5dee\u8ddd\u65e0\u5173\u7d27\u8981\uff09\u3002\u867d\u7136\u5728\u5927\u591a\u6570\u65f6\u5019\u4f5c\u4e3a\u4e00\u9897 16 \u4f4d\u82af\u7247\uff0c8088 \u5176\u5b9e\u6709 20 \u4f4d\u7684\u5bfb\u5740\u7a7a\u95f4\uff0c\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u5bfb\u5740\u6700\u5927 1 MiB \u7684\u5185\u5b58\uff0c\u8ba9\u6211\u4eec\u60f3\u60f3\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u6837\u7684\u9650\u5236\u3002</p> <p>\u5185\u5b58\uff08memory\uff09\uff0c\u65e0\u8bba\u662f\u5728\u5927\u8111\u91cc\u7684\u8fd8\u662f\u7535\u8111\u91cc\u7684\uff0c\u82e5\u65e0\u6cd5\u8ddf\u8e2a\u5176\u4f4d\u7f6e\u4ee5\u4fbf\u540e\u7eed\u8bfb\u53d6\uff0c\u5219\u6beb\u65e0\u7528\u5904\u3002\u4e8e\u662f\u7535\u8111\u4e2d\u7684\u5185\u5b58\u4ee5\u5b57\u8282\uff08byte\uff09\u4e3a\u5355\u4f4d\u7d22\u5f15\uff0c\u6bcf\u4e00\u4e2a\u5b57\u8282\u90fd\u6709\u5b83\u72ec\u4e00\u65e0\u4e8c\u7684\u5730\u5740\u3002\u8fd9\u4e9b\u4ece 0 \u5230\u5904\u7406\u5668\u5bfb\u5740\u7a7a\u95f4\u6700\u5927\u9650\u503c\u7684\u5730\u5740\uff0c\u4f7f\u5f97\u7535\u8111\u53ef\u4ee5\u77e5\u9053\u5728\u54ea\u91cc\u653e\u4e86\u4ec0\u4e48\u4e1c\u897f\u300220 bits \u80fd\u6700\u5927\u8868\u793a\u7684\u6570\u5b57\u662f 1,048,575\uff0c\u800c 1,048,575 \u4e2a\u5b57\u8282\u5373\u4e3a 1 MiB\uff0c\u4e5f\u5c31\u662f 8088 \u7684 20 \u4f4d\u5bfb\u5740\u603b\u7ebf\u80fd\u5904\u7406\u7684\u6700\u5927\u5185\u5b58\u91cf\u3002\u5bf9\u521b\u9020\u521d\u4ee3 IBM PC \u7684\u5de5\u7a0b\u5e08\uff0c\u8fd9\u5e76\u4e0d\u662f\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\u4e8b\u3002\u7684\u786e\uff0c\u5728\u4ed6\u4eec 1981 \u5e74\u53d1\u5e03\u8fd9\u53f0\u673a\u5668\u65f6\uff0c1 MiB \u6709\u591a\u5927\uff0c\u600e\u4e48\u5f3a\u8c03\u90fd\u4e0d\u7b97\u8fc7\u5206\u3002\u6bd5\u7adf\u5728\u5f53\u5e74\uff0c\u6240\u8c13\u201c\u9876\u7ea7\u201d\u7684 Apple II \u4e5f\u53ea\u6709 48 KiB \u7684\u5185\u5b58\uff0c\u8fd8\u6709\u5f88\u591a\u673a\u5668\u751a\u81f3\u53ea\u6709\u4e0d\u5230 16 KiB.</p> <p>\u9664\u4e86\u7528\u4e8e\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u901a\u7528\u5185\u5b58\u6c60\u4ee5\u5916\uff0c\u5904\u7406\u5668\u8fd8\u9700\u8981\u5904\u7406\u5176\u4ed6\u7c7b\u578b\u7684\u5185\u5b58\u3002\u8fd8\u6709\u5728\u5236\u9020\u9636\u6bb5\u70e7\u5199\u8fdb\u82af\u7247\u7684 ROM \u5185\u5b58\u2014\u2014\u53ea\u8bfb\u5185\u5b58\uff08Read-Only Memory\uff09\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e3a\u4e86\u4f7f\u7535\u8111\u80fd\u6b63\u5e38\u542f\u52a8\u7684\u6240\u9700\u5e95\u5c42\u4ee3\u7801\uff0c\u5bf9\u521d\u4ee3 IBM PC \u6765\u8bf4\uff0c\u8fd8\u6709\u4e00\u5957 BASIC \u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u672c\u5b9e\u73b0\uff08\u56e0\u4e3a\u7f55\u6709\u4f7f\u7528\uff0c\u5728\u540e\u7eed\u673a\u578b\u91cc\u9010\u6e10\u88ab\u5254\u9664\uff09\u3002\u8fd8\u6709\u4e00\u4e9b\u4ece\u901a\u7528\u5185\u5b58\u6c60\u4e2d\u5212\u5206\u51fa\u6765\u7ed9\u7279\u6b8a\u7528\u9014\u7684\u5185\u5b58\u533a\u57df\uff0c\u6bd4\u5982\u63d0\u4f9b\u7ed9\u663e\u793a\u5361\u4ee5\u4fdd\u6301\u521d\u4ee3 IBM PC \u5c4f\u5e55\u663e\u793a\u7684\u6574\u6574 128 Ki \u7684\u5730\u5740\u3002\u6240\u6709\u8fd9\u4e9b\u7279\u6b8a\u7c7b\u578b\u7684\u5185\u5b58\u90fd\u5fc5\u987b\u80fd\u7531 CPU \u8bbf\u95ee\uff0c\u5fc5\u987b\u6709\u81ea\u5df1\u7684\u552f\u4e00\u5730\u5740\u6765\u5b9e\u73b0\u529f\u80fd\uff0c\u56e0\u800c\u4e5f\u5fc5\u987b\u4ece\u901a\u7528\u5185\u5b58\u6c60\u4e2d\u7684\u53ef\u7528\u5730\u5740\u7a7a\u95f4\u4e2d\u51cf\u53bb\u3002</p> <p>IBM \u5de5\u7a0b\u5e08\u5728\u5212\u5206\u901a\u7528\u5185\u5b58\u6c60\u548c\u7279\u6b8a\u7528\u9014\u5730\u5740\u7a7a\u95f4\u65f6\u5341\u5206\u5927\u65b9\u3002\u4e3a\u4e86\u5b9e\u73b0\u53ef\u6269\u5c55\u6027\u548c\u6301\u4e45\u6027\u7684\u76ee\u6807\uff0c\u4ed6\u4eec\u7ed9\u4e00\u4e9b\u4ece\u672a\u60f3\u5230\u8fc7\u7684\u7528\u9014\u4fdd\u7559\u4e86\u5927\u5757\u7684\u201c\u7279\u6b8a\u201d\u5185\u5b58\u3002\u603b\u7684\u6765\u8bf4\uff0c\u4ed6\u4eec\u4e3a\u5b9e\u9645\u6216\u8005\u6f5c\u5728\u7684\u7279\u6b8a\u7528\u9014\u4fdd\u7559\u4e86 3/8 \u7684\u9ad8\u4f4d\u5185\u5b58\uff0c\u5269\u4e0b\u7684 5/8\u2014\u2014640 KiB\uff0c\u7559\u7ed9\u901a\u7528\u5185\u5b58\u6c60\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6700\u5f00\u59cb\u7684 640 KiB \u5185\u5b58\u6210\u4e3a\u4e86\u201c\u5e38\u89c4\u5185\u5b58\u201d\uff0c\u800c\u5269\u4e0b\u7684 384 KiB\uff08\u5176\u4e2d\u4e00\u90e8\u5206\u662f ROM \u800c\u4e0d\u662f RAM\uff09\u5219\u6210\u4e3a\u4e86\u201c\u9ad8\u4f4d\u5185\u5b58\u201d\u3002\u5728 IBM PC \u4eae\u76f8\u65f6\uff0cIBM \u5b98\u65b9\u53d1\u5e03\u7684\u5185\u5b58\u6620\u5c04\u8868\u5927\u6982\u662f\u8fd9\u6837\uff1a</p> <p></p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u9605\u8bfb\u50cf\u8fd9\u6837\u7684\u5185\u5b58\u6620\u5c04\u8868\u65f6\uff0c\u9700\u8981\u610f\u8bc6\u5230\u903b\u8f91\u5730\u5740\u7684\u5b58\u5728\u5e76\u4e0d\u610f\u5473\u7740\u5728\u771f\u5b9e\u673a\u5668\u4e0a\u5c31\u4e00\u5b9a\u6709\u5185\u5b58\u8fde\u63a5\u5230\u4e86\u8fd9\u4e2a\u5730\u5740\u3002\u4f8b\u5982\uff0c\u521d\u4ee3 IBM PC \u53ef\u4ee5\u4e70\u5230\u6700\u5c0f\u53ea\u6709 16 KiB \u5e38\u89c4\u5185\u5b58\u7684\u578b\u53f7\u3002\u5373\u4fbf\u662f\u9876\u7ea7\u673a\u5668\u4e5f\u5c31\u53ea\u6709 256 KiB\uff0c\u4f7f\u5e38\u89c4\u5185\u5b58\u7684\u5927\u90e8\u5206\u533a\u57df\u90fd\u662f\u7a7a\u7684\u3002\u7c7b\u4f3c\u7684\uff0c\u65e9\u671f\u7684\u663e\u793a\u5361\u4e5f\u53ea\u7528\u4e86\u9ad8\u4f4d\u5185\u5b58\u6240\u63d0\u4f9b\u7684 128 KiB \u7684\u5730\u5740\u7a7a\u95f4\u91cc\u7684 32 KiB \u6216\u8005 64 KiB. \u4e8e\u662f 640 K \u4e4b\u5899\u5728\u65e9\u671f\u53ea\u80fd\u7b97\u4e00\u4e2a\u7406\u8bba\u4e0a\u7684\u9650\u5236\uff0c\u5f88\u5c11\u6709\u65e9\u671f\u7528\u6237\u6216\u5f00\u53d1\u4eba\u5458\u6ce8\u610f\u5230\u4e86\u8fd9\u4e00\u70b9\u3002</p>"},{"location":"2024/01/01/640-k-%E4%B9%8B%E5%A2%99/#80286-16-mib","title":"80286 \u548c 16 MiB","text":"<p>\u7136\u800c\u597d\u666f\u4e0d\u957f\uff0c\u4f34\u968f\u7740 IBM \u7684\u6210\u679c\uff08\u548c\u4e00\u4f17\u590d\u5236\u54c1\uff09\u6210\u4e3a\u7f8e\u56fd\u5546\u4e1a\u7684\u65b0\u6807\u51c6\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u9ad8\u7ea7\u5e94\u7528\u7a0b\u5e8f\u51fa\u73b0\u4e86\uff0c\u5bf9\u5185\u5b58\u548c\u7b97\u529b\u63d0\u51fa\u4e86\u8d8a\u6765\u8d8a\u9ad8\u7684\u8981\u6c42\u3002\u4ec5\u4ec5\u5230 1984 \u5e74\uff0c640 K \u4e4b\u5899\u4fbf\u4ece\u7406\u8bba\u6027\u7684\u53d8\u6210\u4e86\u5b9e\u5b9e\u5728\u5728\u7684\u9650\u5236\uff0c\u800c\u5ba2\u6237\u4e5f\u5f00\u59cb\u8981\u6c42 IBM \u5bf9\u6b64\u7ed9\u51fa\u4e00\u4e2a\u4ea4\u4ee3\u3002\u4f5c\u4e3a\u56de\u5e94\uff0cIBM \u540c\u5e74\u53d1\u5e03\u4e86 PC/AT\uff0c\u4f7f\u7528\u4e86\u53f7\u79f0\u5177\u6709 24 \u4f4d\u5bfb\u5740\u7a7a\u95f4\u3001\u53ef\u5904\u7406 16 MiB \u5185\u5b58\u7684\u82f1\u7279\u5c14 80286 \u5904\u7406\u5668\u3002\u4e3a\u4e86\u89e3\u9501\u8fd9\u4e9b\u6f5c\u5728\u7684\u989d\u5916\u5185\u5b58\u7a7a\u95f4\uff0cIBM \u51b3\u5b9a\u9075\u5faa\u5e38\u8bc6\uff0c\u5ef6\u4f38\u5185\u5b58\u6620\u5c04\u8868\u8d85\u8fc7\u6b62\u4e8e 1 MiB \u7684\u7279\u6b8a\u7528\u9014\u9ad8\u4f4d\u5185\u5b58\u533a\u57df\uff0c\u628a\u6240\u6709\u8d85\u8fc7 1 MiB \u7684\u5185\u5b58\u5730\u5740\u90fd\u4f5c\u4e3a\u4e00\u4e2a\u9002\u7528\u4e8e\u901a\u7528\u7528\u9014\u7684\u201c\u6269\u5145\u5185\u5b58\u201d\uff08extended memory\uff09\u6c60\u3002</p> <p>\u95ee\u9898\u89e3\u51b3\uff1f\u5443\u2026\u2026\u4e0d\u5b8c\u5168\u662f\uff0c\u5426\u5219\u8fd9\u7bc7\u6587\u7ae0\u5c31\u8981\u77ed\u5f97\u591a\u4e86\u3002\u7531\u4e8e\u66f4\u591a\u662f\u8f6f\u4ef6\u5c42\u9762\u800c\u4e0d\u662f\u786c\u4ef6\u5c42\u9762\u7684\u95ee\u9898\uff0c\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6240\u6709\u8fd9\u4e9b\u6f5c\u5728\u7684\u6269\u5145\u5185\u5b58\u5bf9\u7edd\u5927\u591a\u6570\u4e70\u4e86 PC/AT \u7684\u4eba\u6765\u8bf4\u7528\u5904\u4e0d\u5927\u3002\u8981\u7406\u89e3\u4e3a\u4ec0\u4e48\u4f1a\u53d8\u6210\u8fd9\u6837\uff0c\u6211\u4eec\u9700\u8981\u5173\u6ce8\u65b0\u5904\u7406\u5668\u548c\u4eba\u4eec\u4ecd\u5728\u5176\u4e0a\u8fd0\u884c\u7684\u8001\u64cd\u4f5c\u7cfb\u7edf\u7684\u6b7b\u4ea1\u4e4b\u62e5\u3002</p> <p>80286 \u8fdc\u4e0d\u53ea\u662f 8086/8088 \u5904\u7406\u5668\u7684\u66f4\u5feb\u7248\u672c\u3002\u5728\u8fd0\u884c MS-DOS \u7684 IBM PC \u5360\u9886\u5546\u7528\u8ba1\u7b97\u4e4b\u524d\uff0c\u82f1\u7279\u5c14\u5c31\u5728\u5f00\u53d1\u8fd9\u6b3e\u82af\u7247\u4e86\uff0c\u800c\u4ed6\u4eec\u5e76\u6ca1\u6709\u4e3a\u4e86\u4fdd\u6301\u548c\u8fd9\u79cd\u914d\u7f6e\u517c\u5bb9\u7684\u76ee\u7684\u800c\u653e\u5f03\u8bbe\u8ba1\u5e2e\u4ed6\u4eec\u5f15\u9886\u8ba1\u7b97\u65b0\u65b9\u5411\u7684\u4e0b\u4e00\u4ee3\u82af\u7247\u3002\u82f1\u7279\u5c14\u8ba4\u4e3a\u5fae\u578b\u8ba1\u7b97\u673a\u6b63\u5904\u4e8e\u51e0\u5341\u5e74\u524d\u5927\u578b\u673a\u6784\u673a\u5668\u6240\u5904\u7684\u9636\u6bb5\uff0c\u5373\u5c06\u7a81\u7834\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6 Brian L. Stuart \u6240\u63cf\u8ff0\u7684\u201c\u4e00\u4e4b\u4e09\u89d2\u201d\uff1a\u4e00\u4e2a\u7528\u6237\u5728\u4e00\u53f0\u7535\u8111\u4e0a\u4e00\u6b21\u8fd0\u884c\u4e00\u4e2a\u7a0b\u5e8f\u3002\u6700\u8d77\u7801\uff0c\u82f1\u7279\u5c14\u8ba4\u4e3a\u8fd9\u4e2a\u4e09\u89d2\u7684\u7b2c\u4e09\u4e2a\u70b9\u5fc5\u987b\u5012\u4e0b\uff0c\u5927\u5bb6\u90fd\u610f\u8bc6\u5230\u4e86\u591a\u4efb\u52a1\uff0c\u5373\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u7a0b\u5e8f\u5e76\u5728\u5176\u95f4\u81ea\u7531\u5207\u6362\uff0c\u5728\u5b8c\u6210\u590d\u6742\u4efb\u52a1\u65f6\uff0c\u6bd4\u8d77\u8d39\u65f6\u8d39\u529b\u5730\u5173\u95ed\u548c\u5f00\u542f\u4e00\u4e2a\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u6548\u7387\u5b9e\u5728\u662f\u9ad8\u592a\u591a\u4e86\u3002\u4f46\u9057\u61be\u7684\u662f\u5bf9 MS-DOS \u6765\u8bf4\uff0c\u6dfb\u52a0\u591a\u4efb\u52a1\u652f\u6301\u4f1a\u8ba9\u5b83\u7684\u590d\u6742\u5ea6\u4e0a\u5347\u5230\u4e00\u4e2a\u60ca\u4e3a\u5929\u4eba\u7684\u7a0b\u5ea6\u3002</p> <p>\u64cd\u4f5c\u7cfb\u7edf\u5f53\u7136\u662f\u503c\u5f97\u7ec8\u8eab\u5b66\u4e60\u7684\u590d\u6742\u8bfe\u9898\u3002\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u5b83\u4eec\u7684\u590d\u6742\u5ea6\u5206\u89e3\u4e3a\u51e0\u4e2a\u57fa\u672c\u529f\u80fd\uff1a</p> <ol> <li>\u4e3a\u7528\u6237\u63d0\u4f9b\u4f7f\u7528\u7535\u8111\u7ba1\u7406\u7a0b\u5e8f\u548c\u6587\u4ef6\u7684\u754c\u9762\u3001</li> <li>\u7ba1\u7406\u7535\u8111\u4e0a\u8fd0\u884c\u7684\u4efb\u52a1\u5e76\u5728\u5176\u4e4b\u4e2d\u5206\u914d\u8d44\u6e90\u3001</li> <li>\u4f5c\u4e3a\u7535\u8111\u5e95\u5c42\u786c\u4ef6\u548c\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684\u7f13\u51b2\u6216\u6865\u6881\u3002</li> </ol> <p>\u8fd9\u4e9b\u5c31\u662f\u6211\u4eec\u5e0c\u671b\u5982\u4eca\u7684\u64cd\u4f5c\u7cfb\u7edf\u6700\u8d77\u7801\u80fd\u505a\u5230\u7684\u4e8b\u60c5\u3002\u4f46\u5bf9\u4e8e\u56f0\u5728\u201c\u4e00\u4e4b\u4e09\u89d2\u201d\u7684\u7535\u8111\u6765\u8bf4\uff0c\u7b2c\u4e8c\u548c\u7b2c\u4e09\u4e2a\u529f\u80fd\u6ca1\u4ec0\u4e48\u5fc5\u8981\uff1a</p> <ol> <li>\u53ea\u6709\u4e00\u4e2a\u7a0b\u5e8f\u80fd\u540c\u65f6\u8fd0\u884c\uff0c\u6240\u4ee5\u8d44\u6e90\u7ba1\u7406\u7684\u987e\u8651\u5c31\u4e0d\u5b58\u5728\u4e86\uff1b</li> <li>\u6ca1\u6709\u7a0b\u5e8f\u540c\u65f6\u8fd0\u884c\u5bfc\u81f4\u51b2\u7a81\u7684\u987e\u8651\uff0c\u88f8\u91d1\u5c5e\uff08bare-metal\uff09\u8ba1\u7b97\uff0c\u5373\u76f4\u63a5\u5bf9\u786c\u4ef6\u8fdb\u884c\u64cd\u7eb5\uff0c\u800c\u975e\u901a\u8fc7\u4ea4\u7ec7\u7684\u64cd\u4f5c\u7cfb\u7edf\u8c03\u7528\u4f20\u9012\u8bf7\u6c42\uff0c\u5e38\u88ab\u8ba4\u4e3a\u4e0d\u4ec5\u662f\u53ef\u63a5\u53d7\u7684\uff0c\u800c\u4e14\u662f\u9884\u671f\u7684\u65b9\u6cd5\u3002</li> </ol> <p>\u672c\u7740\u8fd9\u79cd\u7cbe\u795e\uff0cMS-DOS \u4ec5\u4ec5\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e86 27 \u4e2a\u51fd\u6570\u8c03\u7528\uff0c\u5176\u4e2d\u7edd\u5927\u591a\u6570\u90fd\u53ea\u6d89\u53ca\u78c1\u76d8\u548c\u6587\u4ef6\u7ba1\u7406\u3002\uff08\u8ddf\u73b0\u4ee3\u7684 Windows \u6216\u8005 OS X API \u5bf9\u6bd4\u4e00\u4e0b\u5427\uff0c\u7a0b\u5e8f\u5458\u540c\u884c\u4eec\uff01\uff09\u81f3\u4e8e\u5176\u4ed6\u4e8b\u60c5\uff0c\u88f8\u91d1\u5c5e\u76f4\u63a5\u62ff\u7740\u5927\u9524\u5f00\u7838\u90fd\u662f\u53ef\u4ee5\u7684\u3002</p> <p>\u751a\u81f3\u5230\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u90fd\u6ca1\u6cd5\u5f00\u59cb\u8ba8\u8bba\u5f53\u5f15\u5165\u591a\u4efb\u52a1\u5230\u7b49\u5f0f\u4e2d\u65f6\uff0c\u8981\u6c42\u64cd\u4f5c\u7cfb\u7edf\u5728\u6b64\u8fc7\u7a0b\u4e2d\u5b8c\u5168\u63a5\u53d7\u4e0a\u8ff0\u4e09\u70b9\u6838\u5fc3\u529f\u80fd\uff0c\u4f1a\u5e26\u6765\u7684\u590d\u6742\u95ee\u9898\u3002\u5149\u662f\u6211\u4eec\u672c\u6b21\u5c06\u6df1\u5165\u7814\u7a76\u7684\u5185\u5b58\u7ba1\u7406\u95ee\u9898\u5c31\u53d8\u5f97\u8db3\u591f\u590d\u6742\u4e86\u3002\u548c\u5176\u5b83\u7a0b\u5e8f\u5171\u4eab\u540c\u4e00\u53f0\u673a\u5668\u7684\u7a0b\u5e8f\u518d\u4e5f\u4e0d\u80fd\u5728\u5185\u5b58\u91cc\u81ea\u7531\u6765\u5f80\uff0c\u968f\u5904\u5806\u653e\u6570\u636e\u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e48\u505a\u5b58\u5728\u8986\u5199\u5176\u5b83\u6b63\u5728\u7cfb\u7edf\u4e0a\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u4ee3\u7801\u6216\u6570\u636e\u7684\u98ce\u9669\u3002\u53cd\u4e4b\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5fc5\u987b\u8981\u6c42\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6b63\u5f0f\u8bf7\u6c42\u5b83\u4eec\u60f3\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u4e14\u5fc5\u987b\u8bbe\u6cd5\u963b\u6b62\u7a0b\u5e8f\u5bf9\u672a\u6388\u6743\u7684\u5185\u5b58\u533a\u57df\u8fdb\u884c\u4fee\u6539\uff0c\u65e0\u8bba\u662f\u51fa\u4e8e bug \u8fd8\u662f\u6076\u610f\u3002</p> <p>\u53ef\u80fd\u4e5f\u4e0d\u5fc5\u3002\u5728\u4e2a\u4eba\u7535\u8111\u53f2\u4e0a\u5f00\u521b\u4e86\u591a\u4efb\u52a1\u5148\u6cb3\u7684 Commodore Amiga \u6ca1\u600e\u4e48\u89e3\u51b3\u95ee\u9898\u7684\u540e\u534a\u90e8\u5206\uff0c\u53cd\u5012\u8e22\u5230\u4e00\u8fb9\u53bb\u4e86\u3002\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5e94\u5f53\u5411 Amiga \u7684\u64cd\u4f5c\u7cfb\u7edf\u8bf7\u6c42\u4efb\u4f55\u5176\u9700\u8981\u7684\u5185\u5b58\uff0c\u64cd\u4f5c\u7cfb\u7edf\u968f\u4e4b\u8fd4\u56de\u6307\u5411\u5177\u6709\u5176\u6240\u8bf7\u6c42\u5927\u5c0f\u7684\u5185\u5b58\u533a\u5757\u7684\u6307\u9488\uff0c\u5e76\u5355\u65b9\u9762\u4fe1\u4efb\u5e94\u7528\u7a0b\u5e8f\u4e0d\u5199\u5230\u754c\u7ebf\u4ee5\u5916\u7684\u5185\u5b58\u3002\u7136\u800c\u9664\u4e86\u5f00\u53d1\u4eba\u5458\u7684\u6280\u672f\u548c\u826f\u5fc3\u4ee5\u5916\uff0c\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u80fd\u963b\u6b62\u6b64\u7c7b\u672a\u6388\u6743\u7684\u5185\u5b58\u8bbf\u95ee\u53d1\u751f\u3002\u6362\u53e5\u8bdd\u8bf4\uff0cAmiga \u4e0a\u7684\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u90fd\u53ef\u4ee5\u5199\u5165\u673a\u5668\u5185\u5b58\u7684\u4efb\u4f55\u5730\u5740\uff0c\u65e0\u8bba\u662f\u5426\u5f97\u5230\u4e86\u6b63\u786e\u5206\u914d\u3002\u663e\u793a\u5185\u5b58\u3001\u53ef\u7528\u5185\u5b58\u3001\u5176\u5b83\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u3001\u5176\u5b83\u5e94\u7528\u7a0b\u5e8f\u7684\u4ee3\u7801\uff0c\u90fd\u662f\u56fe\u8c0b\u4e0d\u8f68\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u76d8\u4e2d\u9910\u3002\u8fd9\u79cd\u672a\u7ecf\u6388\u6743\u7684\u5185\u5b58\u8bbf\u95ee\u51e0\u4e4e\u603b\u662f\u4ee5\u7cfb\u7edf\u7684\u5b8c\u5168\u5d29\u6e83\u4f5c\u4e3a\u7ed3\u5c40\u3002\u4e00\u540d\u65e0\u6076\u610f\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u5f53\u7136\u4f1a\u60f3\u8ba9\u81ea\u5df1\u7684\u7a0b\u5e8f\u4f5c\u4e3a\u826f\u597d\u516c\u6c11\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u6545\u610f\u5199\u5230\u6ca1\u6709\u6b63\u786e\u5206\u914d\u7684\u5185\u5b58\uff0c\u4f46\u8fd9\u79cd\u7c7b\u578b\u7684 bug \u662f\u51fa\u4e86\u540d\u7684\u5199\u51fa\u6765\u5bb9\u6613\u4fee\u8d77\u6765\u96be\u3002\u5728 Amiga \u4e0a\uff0c\u4e00\u4e2a\u8fd9\u6837\u7684\u9519\u8bef\u4e0d\u4ec5\u4f1a\u8ba9\u51fa\u9519\u7684\u7a0b\u5e8f\u5d29\u6e83\uff0c\u8fd8\u4f1a\u8fde\u5e26\u4e0a\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u3002\u867d\u7136 Amiga \u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u652f\u6301\u591a\u4efb\u52a1\u5904\u7406\u7684\u4e2a\u4eba\u7535\u8111\u7684\u610f\u4e49\u503c\u5f97\u5c0a\u91cd\uff0c\u4f46\u663e\u7136\u8fd9\u4e0d\u662f\u5b9e\u73b0\u591a\u4efb\u52a1\u5904\u7406\u7684\u7406\u60f3\u65b9\u5f0f\u3002</p>"},{"location":"2024/01/01/640-k-%E4%B9%8B%E5%A2%99/#_4","title":"\u4fdd\u62a4\u6a21\u5f0f\u548c\u5b9e\u6a21\u5f0f","text":"<p>\u66f4\u53ef\u9760\u7684\u65b9\u6cd5\u662f\u989d\u5916\u589e\u52a0\u4e00\u6b65\uff0c\u8981\u8ddf\u8e2a\u3001\u8fd8\u8981\u4fdd\u62a4\u5206\u914d\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u5185\u5b58\u3002\u5185\u5b58\u4fdd\u62a4\u901a\u5e38\u662f\u4f7f\u7528\u865a\u62df\u5185\u5b58\u5b9e\u73b0\u7684\uff1a\u5f53\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u8bf7\u6c42\u5185\u5b58\uff0c\u5b83\u5f97\u5230\u7684\u5e76\u4e0d\u662f\u7cfb\u7edf\u5185\u5b58\u6c60\u91cc\u7684\u771f\u5b9e\u5730\u5740\uff0c\u800c\u662f\u4e00\u4e2a\u865a\u62df\u5730\u5740\uff0c\u53ef\u4ee5\u5728\u6bcf\u6b21\u7a0b\u5e8f\u8bbf\u95ee\u5176\u6570\u636e\u65f6\u6620\u5c04\u5230\u771f\u5b9e\u5730\u5740\u3002\u4e8e\u662f\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u88ab\u6709\u6548\u7684\u7f6e\u4e8e\u6c99\u7bb1\u4e2d\uff0c\u4e0e\u5176\u5b83\u5e94\u7528\u7a0b\u5e8f\u9694\u5f00\uff0c\u4ec5\u80fd\u8bfb\u5199\u5176\u81ea\u5df1\u7684\u6570\u636e\u3002\u53ea\u6709\u64cd\u4f5c\u7cfb\u7edf\u5e95\u5c42\u5bf9\u5185\u5b58\u6c60\u6709\u5b8c\u6574\u7684\u5168\u5c40\u8bbf\u95ee\u3002</p> <p>\u4ec5\u4ec5\u5728\u8f6f\u4ef6\u5c42\u9762\u5b9e\u73b0\u6b64\u7c7b\u5185\u5b58\u4fdd\u62a4\uff0c\u5bf9 20 \u4e16\u7eaa 80 \u5e74\u4ee3\u7684\u7cfb\u7edf\u5de5\u7a0b\u5e08\u6765\u8bf4\u7684\u8d44\u6e90\u7684\u6d88\u8017\u662f\u5b8c\u5168\u65e0\u6cd5\u627f\u53d7\u7684\uff0c\u8fd9\u4e5f\u4fa7\u9762\u8bc1\u660e\u4e86\u4e3a\u4f55 Amiga \u6ca1\u6709\u6b64\u7c7b\u5b9e\u73b0\u3002\u4e8e\u662f\u82f1\u7279\u5c14\u51b3\u5b9a\u7528\u786c\u4ef6\u6765\u52a9\u8f6f\u4ef6\u4e00\u81c2\u4e4b\u529b\u3002\u4ed6\u4eec\u5728 80286 \u4e2d\u5185\u7f6e\u4e86\u4e00\u4e2a\u5185\u5b58\u7ba1\u7406\u5355\u5143\uff0c\u5b83\u53ef\u4ee5\u81ea\u52a8\u5730\u5c06\u865a\u62df\u5185\u5b58\u5730\u5740\u8f6c\u6362\u4e3a\u5b9e\u9645\u5185\u5b58\u5730\u5740\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u4f7f\u8fd9\u4e2a\u6301\u7eed\u7684\u8fc7\u7a0b\u5bf9\u5373\u4f7f\u662f\u64cd\u4f5c\u7cfb\u7edf\u6765\u8bf4\u4e5f\u76f8\u5bf9\u900f\u660e\u3002</p> <p>\u5c3d\u7ba1\u5982\u6b64\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5fc5\u987b\u80fd\u4e86\u89e3\u5230\u8fd9\u4e2a\u529f\u80fd\u7684\u5b58\u5728\uff0c\u4e5f\u5b9e\u9645\u4e0a\u4e3a\u4e86\u5728\u6709\u5185\u5b58\u4fdd\u62a4\u7535\u8def\u7684 CPU \u4e0a\u8fd0\u884c\uff0c\u5fc5\u987b\u91c7\u53d6\u975e\u5e38\u4e0d\u540c\u7684\u7f16\u5199\u65b9\u5f0f\u3002\u82f1\u7279\u5c14\u610f\u8bc6\u5230\u4e86\u4e3a\u8fd9\u6b3e\u82af\u7247\u7f16\u5199\u6b64\u7c7b\u64cd\u4f5c\u7cfb\u7edf\u662f\u9700\u8981\u4e00\u5b9a\u65f6\u95f4\u7684\u4e8b\u60c5\uff0c\u4e5f\u610f\u8bc6\u5230\u4e86\u4e0e\u6b64\u540c\u65f6\u5bf9 8086/8088 \u82af\u7247\u7684\u517c\u5bb9\u6027\u662f\u4e00\u4ef6\u597d\u4e8b\uff0c\u4e8e\u662f\u4ed6\u4eec\u5728 80286 \u4e2d\u5185\u7f6e\u4e86\u4e24\u4e2a\u53ef\u7528\u7684\u8fd0\u884c\u6a21\u5f0f\uff1a</p> <ul> <li>\u5728\u201c\u4fdd\u62a4\u6a21\u5f0f\u201d\uff08\u4ed6\u4eec\u5e0c\u671b\u6700\u7ec8\u80fd\u5e7f\u6cdb\u4f7f\u7528\uff09\u4e0b\uff0c\u82af\u7247\u7684\u5b8c\u6574\u6f5c\u80fd\u90fd\u80fd\u5f97\u5230\u91ca\u653e\uff0c\u5305\u62ec\u5185\u5b58\u4fdd\u62a4\u548c\u6700\u9ad8\u5bfb\u5740 16 MiB \u7684\u80fd\u529b\u3002</li> <li>\u5728\u201c\u5b9e\u6a21\u5f0f\u201d\u4e0b\uff0c80286 \u4f1a\u50cf\u4e00\u9897\u589e\u5f3a\u7248\u7684 8086/8088\uff0c\u6ca1\u6709\u5185\u5b58\u4fdd\u62a4\u529f\u80fd\uff0c\u4e14\u4f9d\u7136\u5b58\u5728 1 MiB \u7684\u5bfb\u5740\u7a7a\u95f4\u4e0a\u9650\u3002</li> </ul> <p>\u8003\u8651\u5230\u5728\u65e9\u671f\uff0c\u81f3\u5c11\u8fd9\u6b3e\u65b0\u82af\u7247\u9700\u8981\u5728\u4e0d\u4e86\u89e3\u5176\u5b8c\u6574\u80fd\u529b\u7684\u8001\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u8fd0\u884c\uff0c\u82f1\u7279\u5c14\u51b3\u5b9a\u8ba9 80286 \u5728\u542f\u52a8\u65f6\u9ed8\u8ba4\u8fd0\u884c\u5728\u5b9e\u6a21\u5f0f\u3002\u5982\u679c\u64cd\u4f5c\u7cfb\u7edf\u786e\u5207\u4e86\u89e3 80286 \u4e14\u60f3\u5145\u5206\u53d1\u6325\u5176\u5b8c\u6574\u6f5c\u80fd\uff0c\u53ef\u4ee5\u5728\u542f\u52a8\u65f6\u5c06\u5176\u5207\u6362\u81f3\u4fdd\u62a4\u6a21\u5f0f\u518d\u5f00\u59cb\u8fd0\u884c\u3002</p>"},{"location":"2024/01/01/640-k-%E4%B9%8B%E5%A2%99/#80286","title":"80286 \u548c\u6587\u7269","text":"<p>\u4f46\u5728 80286 \u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e16\u754c\u7ebf\u6536\u675f\u7684\u5730\u65b9\uff0c\u82f1\u7279\u5c14\u5bf9\u81ea\u5df1\u672a\u6765\u82af\u7247\u7684\u96c4\u5fc3\u58ee\u5fd7\u51fa\u4e86\u5dee\u9519\u3002\u65e9\u671f 80286 \u7684\u7edd\u5927\u591a\u6570\u90fd\u88ab\u7528\u5728\u4e86 IBM PC/AT \u548c\u5176\u4eff\u54c1\u4e0a\uff0c\u800c\u8fd9\u4e4b\u4e2d\u7684\u7edd\u5927\u591a\u6570\u90fd\u8fd0\u884c\u7740 MS-DOS\uff0c\u5fae\u8f6f\u53e4\u8001\u7684\u201c\u5feb\u800c\u810f\u201d\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5b83\u5bf9 80286 \u7684\u5b8c\u6574\u80fd\u529b\u4e00\u65e0\u6240\u77e5\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u82e5\u8981\u8ba9\u5b83\u4e86\u89e3\u8fd9\u4e9b\u80fd\u529b\uff0c\u5c31\u5f97\u5b8c\u5168\u91cd\u5199\uff0c\u7ee7\u800c\u7834\u574f\u4e0e\u6240\u6709\u73b0\u5b58 MS-DOS \u8f6f\u4ef6\u7684\u517c\u5bb9\u6027\u3002\u800c MS-DOS \u6700\u5f00\u59cb\u5982\u6b64\u6d41\u884c\u7684\u539f\u56e0\uff0c\u4e0d\u662f\u4e30\u5bcc\u7684\u529f\u80fd\uff0c\u4e0d\u662f\u53cb\u597d\u7684\u7528\u6237\u754c\u9762\uff0c\u4e5f\u4e0d\u662f\u827a\u672f\u4e0a\u7684\u5438\u5f15\u529b\uff0c\u800c\u504f\u504f\u5c31\u662f\u90a3\u4e00\u5927\u6279\u5546\u7528\u8f6f\u4ef6\u3002\u8981\u8ba9\u7528\u6237\u8df3\u5230\u4e00\u4e2a\u5047\u60f3\u7684\u3001\u6ca1\u6709\u8f6f\u4ef6\u5728\u4e4b\u4e0a\u8fd0\u884c\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5c31\u548c\u8ba9\u5f00\u53d1\u8005\u4e3a\u4e00\u4e2a\u6ca1\u6709\u7528\u6237\u7684\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\u96be\u3002\u8fd9\u5c31\u662f\u4e00\u4e2a\u5148\u6709\u9e21\u8fd8\u662f\u5148\u6709\u86cb\u7684\u95ee\u9898\uff0c\u5e76\u4e14\u8c01\u90fd\u770b\u4e0d\u5230\u77ed\u671f\u5185\u51fa\u73b0\u4efb\u4f55\u4e00\u4e2a\u7684\u53ef\u80fd\u6027\u3002</p> <p>\u5f88\u5feb\uff0cIBM \u6bcf\u4e2a\u6708\u90fd\u80fd\u5356\u51fa\u6570\u5343\u53f0 PC/AT\uff0c\u800c\u4eff\u54c1\u5382\u5546\u751a\u81f3\u540e\u6765\u81ea\u5df1\u8fd8\u5356\u51fa\u4e86\u66f4\u591a\u7684 80286 \u673a\u5668\u3002\u7136\u800c\u8fd9\u4e9b\u673a\u5668\u4e2d\u81f3\u5c11 95% \u90fd\u5728\u5f85\u673a\u4e2d\u6d6a\u8d39\u81ea\u5df1\u7684\u7edd\u5927\u591a\u6570\u6f5c\u80fd\uff0c\u591a\u4e8f\u4e86\u8fd9\u582a\u6bd4\u4e09\u661f\u5806\u6587\u7269\u7684 MS-DOS\u3002\u5bf9\u4e8e\u6240\u6709\u8fd9\u4e9b\u7528\u6237\uff0c\u8fc7\u53bb\u7684 640 K \u4e4b\u5899\u8fd8\u662f\u4e00\u5982\u65e2\u5f80\u7684\u9ad8\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5728\u673a\u5668\u91cc\u585e\u6ee1\u6269\u5145\u5185\u5b58\uff0c\u7136\u800c\u5374\u5b8c\u5168\u6ca1\u6709\u529e\u6cd5\u4f7f\u7528\u3002\u5f53\u7136\uff0c\u672c\u5e94\u88ab 80286 \u53d8\u6210\u73b0\u5b9e\u7684\u591a\u4efb\u52a1\u5904\u7406\uff0c\u5bf9 MS-DOS \u6765\u8bf4\u4f9d\u7136\u662f\u4e00\u4e2a\u672a\u77e5\u9886\u57df\uff0c\u5c31\u50cf\u4e00\u53f0 GPS \u6a21\u5757\u5bf9\u798f\u7279 T \u578b\u8f66<sup>4</sup> \u6765\u8bf4\u3002IBM \u4e3a\u62b1\u6028\u73b0\u72b6\u7684\u5ba2\u6237\u63d0\u4f9b\u7684\u552f\u4e00\u51fa\u8def\u5c31\u662f\u6362\u4e00\u4e2a\u522b\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\u7684\u786e\uff0c\u5bf9 PC/AT \u548c\u5176\u5b83\u57fa\u4e8e 80286 \u7684\u673a\u5668\u6765\u8bf4\uff0c\u8fd8\u6709\u4e00\u4e9b MS-DOS \u7684\u66ff\u4ee3\u54c1\uff0c\u5305\u62ec\u597d\u51e0\u79cd\u7814\u7a76\u673a\u6784\u6700\u559c\u6b22\u7684 Unix \u7684\u53d8\u79cd\uff08\u751a\u81f3\u8fd8\u6709\u4e00\u79cd\u6765\u81ea\u5fae\u8f6f\uff09\uff0c\u8fd8\u6709\u4e00\u4e9b\u65b0\u53d1\u660e\u6bd4\u5982\u6570\u5b57\u7814\u7a76\u516c\u53f8\uff08Digital Research\uff09\u7684\u5e76\u884c DOS\uff0c\u5b83\u52aa\u529b\u5730\u5b9e\u73b0\u4e86\u4e00\u90e8\u5206 MS-DOS \u517c\u5bb9\u6027\uff0c\u4f46\u7ed3\u679c\u559c\u5fe7\u53c2\u534a\u3002\u7136\u800c\uff0c\u8981\u5145\u5206\u5229\u7528 MS-DOS \u5e9e\u5927\u7684\u8f6f\u4ef6\u5e93\uff0c\u552f\u4e00\u4e07\u65e0\u4e00\u5931\u7684\u65b9\u6cd5\u5c31\u662f\u8fd0\u884c\u771f\u6b63\u7684 MS-DOS\u3002\uff08\u4e0d\u6b62\u4e00\u79cd\u65b9\u6cd5\u4e86\uff01\uff09MS-DOS\uff0c\u8fd9\u5c31\u662f\u5927\u591a\u6570\u7528\u7740\u914d\u5907 80286 \u7684\u673a\u5668\u7684\u4eba\u4eec\u6700\u7ec8\u843d\u5f97\u7528\u7684\u4e1c\u897f\u3002</p> <p>\u4e0e\u6b64\u540c\u65f6\uff0c\u4e3a MS-DOS \u5f00\u53d1\u8f6f\u4ef6\u800c\u4f7f\u5f97 MS-DOS \u6210\u4e3a\u5927\u90e8\u5206\u7528\u6237\u4ec5\u5269\u9009\u62e9\u7684\u4eba\u4eec\u65e5\u590d\u4e00\u65e5\u5730\u611f\u53d7\u5230\u88ab 640 K \u4e4b\u5899\u6324\u5f97\u8d8a\u6765\u8d8a\u75bc\u4e86\u3002\u7ec8\u4e8e\uff0c\u521b\u9020\u4e86\u7edf\u6cbb\u7f8e\u56fd\u516c\u53f8\u7684\u53f2\u4e0a\u6700\u6210\u529f\u8f6f\u4ef6 Lotus 1-2-3 \u8868\u683c\u7684 Lotus \u516c\u53f8\u5750\u4e0d\u4f4f\u4e86\uff0c\u51b3\u5b9a\u9760\u4ed6\u4eec\u7684\u5f71\u54cd\u529b\u505a\u70b9\u4ec0\u4e48\u3002\u4ed6\u4eec\u8bf4\u670d\u4e86\u82f1\u7279\u5c14\uff0c\u4e0e\u5176\u4e00\u540c\u8bbe\u8ba1\u51fa\u4e00\u4e2a\u5728\u4e0d\u629b\u5f03 MS-DOS \u7684\u60c5\u51b5\u4e0b\u903e\u8d8a 640 K \u4e4b\u5899\u7684\u65b9\u6848\u3002\u4ed6\u4eec\u6700\u7ec8\u63d0\u51fa\u6765\u7684\u65b9\u6848\u662f\u4e2a\u4e0d\u582a\u5165\u76ee\u7684\u70c2\u8865\u4e01<sup>5</sup>\u2014\u2014\u4e5f\u9002\u7528\u4e8e\u63cf\u8ff0\u5176\u4ed6\u6240\u6709\u7a81\u7834 640 K \u4e4b\u5899\u7684\u4f01\u56fe\u3002</p>"},{"location":"2024/01/01/640-k-%E4%B9%8B%E5%A2%99/#_5","title":"\u9a91\u7740\u6587\u7269\u8fc7\u5927\u6cb3","text":"<p>\u770b\u7740\u521d\u4ee3 IBM PC \u8bbe\u8ba1\u5e08\u7559\u4e0b\u7684\u677e\u6563\u7684\u9ad8\u4f4d\u5185\u5b58\u533a\u57df\uff0cLotus \u548c\u82f1\u7279\u5c14\u610f\u8bc6\u5230\u5e94\u8be5\u5728\u4efb\u4f55\u73b0\u6709\u7684\u673a\u5668\u4e0a\u90fd\u80fd\u5bfb\u627e\u5230\u4e00\u5757\u672a\u4f7f\u7528\u7684\u8fde\u7eed 64 Ki \u5730\u5740\u533a\u5757\u3002\u4e8e\u662f\u4ed6\u4eec\u51b3\u5b9a\u4f7f\u8fd9\u4e2a\u533a\u5757\u6210\u4e3a\u901a\u5f80\u5b89\u88c5\u5728\u8fd9\u53f0\u673a\u5668\u522b\u5904\u6f5c\u5728\u7684\u6570\u5146\u5185\u5b58\u7684\u5927\u95e8\u3002\u901a\u8fc7\u8f6f\u786c\u4ef6\u534f\u4f5c\uff0c\u4ed6\u4eec\u5b9e\u73b0\u4e86\u4e00\u5957\u79f0\u4e3a\u201cbank \u5207\u6362\u201d\u7684\u673a\u5236\u3002\u8fd9\u5757 64 Ki \u7684\u9ad8\u4f4d\u5185\u5b58\u5730\u5740\u533a\u5757\u88ab\u5206\u5272\u4e3a\u56db\u4e2a 16 Ki \u7684\u5c0f\u5757\uff0c\u6bcf\u4e2a\u90fd\u4f5c\u4e3a\u4e00\u4e2a\u900f\u955c\uff0c\u6307\u5411 1 MiB \u4ee5\u4e0a\u5185\u5b58\u91cc\u7684 16 Ki \u4e2a\u5206\u5757\u3002\u5f53\u5904\u7406\u5668\u8bbf\u95ee\u8fd9\u4e9b\u9ad8\u4f4d\u5185\u5b58\u91cc\u7684\u5730\u5740\uff0c\u5176\u5b9e\u9645\u8bbf\u95ee\u7684\u6570\u636e\u5219\u4f4d\u4e8e\u8fd9\u4e9b\u900f\u955c\u6307\u5411\u7684\u5730\u65b9\u3002\u8fd9\u56db\u4e2a\u900f\u955c\u90fd\u53ef\u4ee5\u81ea\u7531\u79fb\u52a8\uff0c\u867d\u7136\u662f\u4ee5\u8f6e\u8f6c\u7684\u65b9\u5f0f\uff0c\u4f46\u7ed9\u4e86\u7528\u6237\u8bbf\u95ee\u4ed6\u4eec\u5b9e\u9645\u5b89\u88c5\u7684\u5185\u5b58\u7684\u80fd\u529b\u3002\u4f7f\u7528\u8fd9\u79cd\u673a\u5236\u89e3\u9501\u7684\u5185\u5b58\u88ab\u79f0\u4e3a\u201c\u6269\u5c55\u5185\u5b58\u201d\uff08expanded memory\uff09\u3002\u5f88\u4e0d\u5e78\u7684\u662f\u5728\u63a5\u4e0b\u6765\u7684\u5e74\u5934\u91cc\uff0c\u56e0\u4e3a\u5b83\u592a\u50cf\u201c\u6269\u5145\u5185\u5b58\u201d\uff08extended memory\uff09\u4e86\uff0c\u8fd9\u4e24\u4e2a\u8bcd\u521b\u9020\u4e86\u65e0\u6570\u7684\u6df7\u6dc6\u548c\u6b67\u4e49\u3002\u4ece\u8fd9\u91cc\u5f00\u59cb\uff0c\u6211\u4eec\u7528\u901a\u7528\u7f29\u5199\u201cEMS\u201d\u4ee3\u8868\u5b83\u3002</p> <p>\u6240\u6709\u8fd9\u4e9b\u989d\u5916\u7684\u5185\u5b58\u4e5f\u4e0d\u662f\u514d\u8d39\u7684\uff1a\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u7ecf\u8fc7\u4fee\u6539\u6765\u68c0\u6d4b EMS \u5185\u5b58\u662f\u5426\u5b58\u5728\u5e76\u4e88\u4ee5\u5229\u7528\uff0c\u4f20\u7edf\u5185\u5b58\u548c EMS \u5185\u5b58\u4e4b\u95f4\u4ecd\u7136\u6709\u5f00\u53d1\u4eba\u5458\u9700\u8981\u65f6\u523b\u6ce8\u610f\u7684\u533a\u522b\u3002\u540c\u6837\u5730\uff0c\u4e0d\u65ad\u79fb\u52a8\u8fd9\u4e9b\u900f\u955c\u5e26\u6765\u7684\u5f00\u9500\u4f7f\u5f97 EMS \u5185\u5b58\u663e\u8457\u6162\u4e8e\u4f20\u7edf\u5185\u5b58\u3002\u4f46\u5f80\u597d\u5904\u770b\uff0cEMS \u5185\u5b58\u5728 MS-DOS \u4e0b\u5373\u53ef\u4f7f\u7528\uff0c\u53ea\u9700\u8981\u5728\u542f\u52a8\u671f\u95f4\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u9a71\u52a8\u7a0b\u5e8f\u5373\u53ef\u3002\u5e76\u4e14\uff0c\u7531\u4e8e\u79fb\u52a8\u900f\u955c\u7684\u786c\u4ef6\u673a\u5236\u5b8c\u5168\u4e0d\u4f9d\u8d56\u5904\u7406\u5668\uff0c\u5b83\u751a\u81f3\u53ef\u4ee5\u5728\u6ca1\u6709\u914d\u5907\u65b0\u578b 80286 \u7684\u673a\u5668\u4e0a\u8fd0\u884c\u3002</p> <p></p> <p>Note</p> <p>\u6b64\u56fe\u5c55\u793a\u4e86 20 \u4e16\u7eaa 80 \u5e74\u4ee3\u4e2d\u671f PC \u4e0a\u4e0d\u540c\u7684\u5185\u5b58\u7c7b\u578b\uff0c\u5728\u84dd\u8272\u533a\u57df\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 IBM PC \u539f\u672c\u7684 1 MiB \u5185\u5b58\u6620\u5c04\u8868\u3002\u5728\u7eff\u8272\u533a\u57df\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u989d\u5916\u914d\u5907\u6709\u6269\u5145\u5185\u5b58\u7684\u673a\u5668\u3002\u800c\u5728\u6a59\u8272\u533a\u57df\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u914d\u5907\u6709\u989d\u5916\u6269\u5c55\u5185\u5b58\u7684\u673a\u5668\u3002</p> <p>\u5728 1985 \u5e74 5 \u6708 COMDEX \u5c55\u4f1a\u4e0a\uff0c\u8be5\u5957\u673a\u5236\u6b63\u5f0f\u4eae\u76f8\uff0c\u5728\u6b64\u4e0d\u4e45\u4e4b\u524d\uff0cLotus \u548c\u82f1\u7279\u5c14\u8bf4\u670d\u4e86\u7b2c\u4e09\u4e2a\u5173\u952e\u5408\u4f5c\u4f19\u4f34\u52a0\u5165\uff1a\u5fae\u8f6f\u3002\u201c\u8fd9\u662f\u5783\u573e\uff01\u8fd9\u662f\u70c2\u8865\u4e01\u554a\uff01\u201d\u6bd4\u5c14\u00b7\u76d6\u8328\u5982\u662f\u8bf4\u9053\uff0c\u201c\u4f46\u6211\u4eec\u4f1a\u505a\u7684\u201d\u3002\u5728 Lotus\u3001\u82f1\u7279\u5c14\u548c\u5fae\u8f6f\u4e09\u5927\u5de8\u5934\u7684\u5f71\u54cd\u529b\u4e0b\uff0cEMS \u6210\u4e3a\u4e86\u8de8\u8d8a 640 K \u4e4b\u5899\u6700\u5207\u5408\u5b9e\u9645\u7684\u65b9\u6cd5\u3002\u5373\u4f7f\u5b83\u65e2\u4e0d\u5b8c\u7f8e\u4e5f\u5f88\u6742\u4e71\uff0c\u8f6f\u4ef6\u5f00\u53d1\u5546\u8fd8\u662f\u4e00\u62e5\u800c\u4e0a\u4e3a\u81ea\u5df1\u5b9e\u9645\u5229\u7528\u5f97\u5230\u7684\u7a0b\u5e8f\u6dfb\u52a0 EMS \u5185\u5b58\u652f\u6301\uff0c\u800c\u786c\u4ef6\u751f\u4ea7\u5546\u5219\u6025\u5fd9\u7740\u5411\u5e02\u573a\u8f93\u9001\u66f4\u591a EMS \u5185\u5b58\u677f\u3002EMS \u53ef\u80fd\u5f88\u4e11\u964b\uff0c\u4f46\u5b83\u5df2\u6210\u6807\u51c6\uff0c\u53c8\u4e0d\u662f\u4e0d\u80fd\u7528\u3002</p>"},{"location":"2024/01/01/640-k-%E4%B9%8B%E5%A2%99/#_6","title":"\u53c8\u4e0d\u662f\u4e0d\u80fd\u7528","text":"<p>EMS \u5012\u662f\u98de\u9ec4\u817e\u8fbe\u4e86\uff0c\u4f46\u6269\u5145\u5185\u5b58\uff08extended memory\uff09\u4e5f\u4e0d\u662f\u5c31\u6b64\u5bff\u7ec8\u6b63\u5bdd\u4e86\u3002\u4e00\u4e9b\u786c\u4ef6\u5236\u9020\u5546\uff08\u6700\u51fa\u540d\u7684\u660e\u663e\u662f IBM\uff09\u5e76\u4e0d\u60f3\u6cbe\u4e0a EMS \u7684\u4e11\u964b\u3002\u8f6f\u4ef6\u5f00\u53d1\u5546\u5219\u7ee7\u7eed\u63a2\u7d22\u88c5\u914d\u6709\u6269\u5145\u5185\u5b58\u7684\u673a\u5668\u7684\u6781\u9650\uff0c\u4f46\u4ecd\u7136\u8bd5\u56fe\u5728 MS-DOS \u7684\u9650\u5236\u4e2d\u8bbf\u95ee\u5230\u6269\u5145\u5185\u5b58\u3002\u5982\u679c\u53ea\u5728\u9700\u8981\u64cd\u7eb5\u6269\u5145\u5185\u5b58\u4e2d\u7684\u6570\u636e\u65f6\uff0c\u77ed\u6682\u5730\u5c06 80286 \u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\uff0c\u7136\u540e\u518d\u5207\u6362\u56de\u5b9e\u6a21\u5f0f\u4f1a\u600e\u4e48\u6837\uff1f\u770b\u8d77\u6765\u86ee\u6709\u9053\u7406\u7684\uff0c\u4f46\u82f1\u7279\u5c14\u4ece\u6765\u6ca1\u6599\u5230\u8fc7\u4f1a\u6709\u4eba\u60f3\u8fd9\u6837\u5728\u8fd0\u884c\u65f6\u5207\u6362\u6a21\u5f0f\uff0c\u4e5f\u5c31\u6ca1\u5728 80286 \u4e2d\u63d0\u4f9b\u4efb\u4f55\u4ece\u4fdd\u62a4\u6a21\u5f0f\u5207\u6362\u56de\u5b9e\u6a21\u5f0f\u7684\u65b9\u6cd5\u3002\u4e8e\u662f\uff0c\u6269\u5145\u5185\u5b58\u7684\u5021\u5bfc\u8005\u4eec\u63d0\u51fa\u4e86\u4e00\u5957\u6bd4\u5b9e\u73b0 EMS \u8fd8\u8981\u66f4\u4e11\u964b\u7684\u70c2\u8865\u4e01\u65b9\u6848\u3002\u4ed6\u4eec\u53d1\u73b0\u53ef\u4ee5\u901a\u8fc7\u91cd\u7f6e 80286\uff0c\u5c31\u50cf\u7528\u6237\u91cd\u542f\u4e86\u7535\u8111\u4e00\u6837\uff0c\u4ee5\u6b64\u628a\u5b83\u5207\u6362\u56de\u5b9e\u6a21\u5f0f\u3002\u968f\u540e 80286 \u4f1a\u518d\u6b21\u8fd0\u884c\u81ea\u68c0\uff08\u5b9e\u4e0d\u76f8\u7792\uff0c\u6d6a\u8d39\u4e86\u5b9d\u8d35\u7684\u51e0\u6beb\u79d2\u65f6\u95f4\uff09\uff0c\u7136\u540e\u518d\u4ece\u505c\u4e0b\u7684\u5730\u65b9\u91cd\u65b0\u5f00\u59cb\u3002\u8fd9\u5c31\u50cf\u5fae\u8f6f\u7684 Gordon Letwin \u7684\u540d\u53e5\u8bf4\u7684\u4e00\u6837\uff0c\u201c\u5c31\u4e3a\u4e86\u6362\u4e2a\u6863\uff0c\u8fd8\u5f97\u628a\u8f66\u5b50\u7684\u706b\u7ed9\u7184\u4e86\u201d\u3002\u8fd9\u5957\u64cd\u4f5c\u4e71\u5f97\u60ca\u4eba\uff0c\u4f4e\u6548\u5f97\u7cdf\u7cd5\u900f\u9876\uff0c\u4f46\u5b83\u80fd\u7528\u3002\u9274\u4e8e\u5b83\u4f4e\u6548\u7684\u672c\u6027\uff0c\u8fd9\u5957\u673a\u5236\u4e3b\u8981\u7528\u4e8e\u5b9e\u73b0\u5b58\u50a8\u4e8e\u5728\u6269\u5145\u5185\u5b58\u91cc\u7684\u865a\u62df\u78c1\u76d8\uff0c\u4e0d\u4f1a\u53d7\u5230\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u7a7a\u95f4\u6301\u7eed\u8bbf\u95ee\u7684\u5f71\u54cd\u3002</p>"},{"location":"2024/01/01/640-k-%E4%B9%8B%E5%A2%99/#80386-xms","title":"80386 \u548c XMS","text":"<p>\u5728 1986 \u5e74\uff0c\u82f1\u7279\u5c14\u6700\u65b0\u6700\u5f3a\u7684\u82af\u7247\uff0c32 \u4f4d\u7684 80386\uff0c\u9996\u6b21\u4eae\u76f8\u4e8e\u5eb7\u67cf\uff08Compaq\uff09Deskpro 386 \u7535\u8111\u4e4b\u4e2d\uff0c\u800c\u4e0d\u662f\u4e00\u53f0 IBM \u673a\u5668\u3002\u6807\u5fd7\u7740\u5546\u4e1a\u8ba1\u7b97\u7684\u5f71\u54cd\u529b\u4e2d\u5fc3\u7f13\u6162\u800c\u7a33\u5b9a\u5730\u4ece IBM \u79fb\u52a8\u5230\u4e86\u5fae\u8f6f\u548c\u4f7f\u7528\u5fae\u8f6f\u7684\u64cd\u4f5c\u7cfb\u7edf\u7684\u4eff\u54c1\u5382\u5546\u3002\u5728\u5f00\u53d1\u8fd9\u6b3e\u65b0\u82af\u7247\u65f6\uff0c\u82f1\u7279\u5c14\u4e5f\u7528\u4e86\u4e9b\u65f6\u95f4\u6765\u89c2\u5bdf 80286 \u662f\u600e\u6837\u88ab\u4f7f\u7528\u7684\uff0c\u540c\u65f6\u4e5f\u9762\u5bf9\u4e86\u73b0\u5b9e\uff0cMS-DOS \u7684\u5bbf\u547d\u5927\u6982\u662f\u201c\u65b0\u4e09\u5e74\uff0c\u65e7\u4e09\u5e74\uff0c\u7f1d\u7f1d\u8865\u8865\u53c8\u4e09\u5e74\u201d\uff0c\u800c\u4e0d\u662f\u88ab\u4ec0\u4e48\u66f4\u597d\u7684\u4e1c\u897f\u6574\u4e2a\u6362\u6389\u3002\u4e8e\u662f\u9664\u4e86\u5176\u5b83\u66f4\u660e\u663e\u7684\u6539\u8fdb\u4ee5\u5916\uff0c\u4ed6\u4eec\u5bf9 80386 \u505a\u51fa\u4e86\u4e00\u4e2a\u7b80\u5355\u800c\u53c8\u5173\u952e\u7684\u4fee\u6539\uff1a80386 \u4e0d\u4ec5\u53ef\u4ee5\u5728\u4fdd\u62a4\u6a21\u5f0f\u4f7f\u7528 32 \u4f4d\u5730\u5740\u7a7a\u95f4\u5bfb\u5740\u96be\u4ee5\u7f6e\u4fe1\u7684 4 GiB \u5185\u5b58\u5927\u5c0f\uff0c\u66f4\u91cd\u8981\u7684\u662f\uff0c\u53ef\u4ee5\u5728\u4e0d\u9700\u8981\u88ab\u53cd\u590d\u91cd\u7f6e\u7684\u60c5\u51b5\u4e0b\uff0c\u4e8e\u8fd0\u884c\u65f6\u5728\u4fdd\u62a4\u6a21\u5f0f\u548c\u5b9e\u6a21\u5f0f\u4e4b\u95f4\u6765\u56de\u5207\u6362\u3002</p> <p>80386 \u628a\u5f00\u53d1\u4eba\u5458\u4ece\u4e25\u91cd\u7684\u4f4e\u6548\u4e2d\u89e3\u653e\u51fa\u6765\uff0c\u655e\u5f00\u4e86\u5728 MS-DOS \u4e2d\u5408\u7406\u4f7f\u7528\u6269\u5145\u5185\u5b58\u7684\u5927\u95e8\u3002\u5728 1988 \u5e74\uff0cEMS \u4e09\u5de8\u5934\u4e4b Lotus\u3001\u82f1\u7279\u5c14\u548c\u5fae\u8f6f\u518d\u4e00\u6b21\u5750\u5728\u4e00\u8d77\uff0c\u8fd9\u6b21\u5e26\u4e0a\u4e86\u4e00\u4e2a\u4eff\u54c1\u5382\u5546\uff1aAST\uff0c\u4f46\u504f\u504f\u6ca1\u6709 IBM\uff0c\u53c8\u4e00\u6b21\uff0c\u4eff\u4f5b\u5728\u6697\u793a\u4ec0\u4e48\u3002\u4ed6\u4eec\u4e00\u8d77\u7f16\u5236\u4e86\u4e00\u5957\u5728 80386 \u548c\u66f4\u65b0\u5904\u7406\u5668\u4e0a\u4f7f\u7528\u6269\u5145\u5185\u5b58\u7684\u6807\u51c6\u65b9\u6cd5\uff0c\u5927\u4f53\u4e0a\u548c\u6211\u4e4b\u524d\u63cf\u8ff0 80286 \u65f6\u7684\u673a\u5236\u4e00\u81f4\uff0c\u4f46\u591a\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u547d\u4ee4\u628a 80386 \u5207\u6362\u56de\u5b9e\u6a21\u5f0f\uff0c\u53d6\u4ee3\u4e4b\u524d\u7684\u5904\u7406\u5668\u91cd\u7f6e\u3002\u4ed6\u4eec\u79f0\u4e4b\u4e3a\u6269\u5145\u5185\u5b58\u89c4\u8303\uff08eXtended Memory Specification\uff09\uff0c\u4f7f\u7528\u6b64\u65b9\u6cd5\u8bbf\u95ee\u7684\u5185\u5b58\u968f\u540e\u88ab\u7edf\u79f0\u4e3a\u201cXMS\u201d\u5185\u5b58\u3002\u548c\u5728 EMS \u4e4b\u4e0b\u4e00\u6837\uff0cXMS \u6a21\u5f0f\u4e0b\u53ea\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u8f7d\u5165\u5230 MS-DOS \u5373\u53ef\u3002\u666e\u901a\u7684\u5b9e\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u9a71\u52a8\u6765\u8bbf\u95ee\u6269\u5145\u5185\u5b58\uff0c\u9a71\u52a8\u7a0b\u5e8f\u4f1a\u5b8c\u6210\u9700\u8981\u7684\u5de5\u4f5c\uff0c\u5982\u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\u3001\u5c06\u6570\u636e\u5757\u4ece\u6269\u5145\u5185\u5b58\u590d\u5236\u5230\u5e38\u89c4\u5185\u5b58\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u7136\u540e\u5728\u5c06\u63a7\u5236\u6743\u4ea4\u8fd8\u7a0b\u5e8f\u524d\u5c06\u5904\u7406\u5668\u5207\u6362\u56de\u5b9e\u6a21\u5f0f\u3002\u8fd9\u8fd8\u662f\u4e0d\u5927\u4f18\u96c5\uff0c\u8fd8\u662f\u6709\u70b9\u4f4e\u6548\uff0c\u8fd8\u662f\u4e1d\u6beb\u6ca1\u6709\u6309\u7167\u82f1\u7279\u5c14\u5de5\u7a0b\u5e08\u610f\u56fe\u7684\u65b9\u5f0f\u4f7f\u7528\u6700\u65b0\u5904\u7406\u5668\u7684\u529f\u80fd\uff0c\u771f\u6b63\u7684\u591a\u4efb\u52a1\u8fd8\u662f\u9ec4\u7cb1\u4e00\u68a6\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5bf9\u66f4\u70ab\u673a\u5668\u5982\u9ea6\u91d1\u5854\uff08Macintosh\uff09\u548c Amiga \u7684\u673a\u4e3b\u4eec\u6765\u8bf4\uff0c\u8fd8\u662f\u6709\u5f88\u591a\u5632\u8bbd\u7684\u7406\u7531\u3002\u5728\u5927\u591a\u6570\u573a\u666f\u4e0b\uff0c\u4f7f\u7528 XMS \u5185\u5b58\u7684\u6548\u7387\u5b9e\u9645\u4e0a\u8fd8\u4e0d\u5982\u4f7f\u7528 EMS \u5185\u5b58\u3002XMS \u5185\u5b58\u7684\u4e3b\u8981\u4f18\u52bf\u662f\u53ef\u4ee5\u8ba9\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u548c EMS \u7684\u56db\u4e2a 16 Ki \u533a\u5757\u5141\u8bb8\u7684\u76f8\u6bd4\u8fdc\u8fdc\u66f4\u5927\u5757\u7684\u975e\u5e38\u89c4\u5185\u5b58\u3002\u5bf9\u4e8e\u4efb\u4f55\u7a0b\u5e8f\u6765\u8bf4\uff0c\u9009\u62e9 EMS \u8fd8\u662f XMS\uff0c\u6700\u7ec8\u90fd\u9700\u8981\u770b\u5b83\u4eec\u5404\u81ea\u7684\u4f18\u7f3a\u70b9\u8c01\u66f4\u9002\u5408\u5b9e\u9645\u4f7f\u7528\u573a\u666f\u3002</p> <p>XMS \u7684\u5230\u6765\uff0c\u548c EMS \u7684\u5e94\u7528\uff0c\u610f\u5473\u7740 MS-DOS \u73b0\u5728\u6709\u4e24\u4e2a\u7ade\u4e89\u7684\u5185\u5b58\u7ba1\u7406\u65b9\u6848\u3002\u4e70\u5bb6\u73b0\u5728\u4e0d\u4ec5\u5f97\u641e\u6e05\u695a\u81ea\u5df1\u5230\u5e95\u662f\u5426\u6709\u8db3\u591f\u7684\u989d\u5916\u5185\u5b58\u6765\u652f\u6301\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\uff0c\u8fd8\u9700\u8981\u5f04\u660e\u767d\u81ea\u5df1\u662f\u5426\u4e70\u5230\u4e86\u6b63\u786e\u7c7b\u578b\u7684\u989d\u5916\u5185\u5b58\u3002\u4e3a\u4e86\u7ed9\u7528\u6237\u63d0\u4f9b\u4fbf\u5229\uff0c\u786c\u4ef6\u5236\u9020\u5546\u5f00\u59cb\u7ed9\u9500\u552e\u53ef\u914d\u7f6e\u4e3a EMS \u6216 XMS \u5185\u5b58\u7684\u5185\u5b58\u677f\uff0c\u53d6\u51b3\u4e8e\u4f60\u73b0\u5728\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u5230\u5e95\u9700\u8981\u4ec0\u4e48\u7c7b\u578b\u7684\u5185\u5b58\u3002</p>"},{"location":"2024/01/01/640-k-%E4%B9%8B%E5%A2%99/#_7","title":"\u6d77\u7ef5\u91cc\u7684\u6c34","text":"<p>\u5728\u5185\u5b58\u7ba1\u7406\u65b9\u9762\uff0c\u5411\u5176\u5b83\u8ba1\u7b97\u5e73\u53f0\u7f13\u6162\u722c\u884c\u9760\u62e2\u7684\u4e0b\u4e00\u9636\u6bb5\u662f\u201cDOS \u6269\u5145\u5668\u201d\u7684\u5f00\u53d1\uff0c\u4e00\u79cd\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u76f4\u63a5\u8fd0\u884c\u5728\u4fdd\u62a4\u6a21\u5f0f\uff0c\u4ece\u800c\u83b7\u5f97\u5bf9\u6269\u5145\u5185\u5b58\u7684\u76f4\u63a5\u8bbf\u95ee\u7684\u8f6f\u4ef6\u3002\u4f7f\u5f97\u5e94\u7528\u7a0b\u5e8f\u65e0\u9700\u5c06\u5176\u8bf7\u6c42\u4f20\u9012\u7ed9\u4f4e\u6548\u7387\u7684\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u3002\u4e00\u4e2a\u4f7f\u7528 DOS \u6269\u5145\u5668\u5f00\u53d1\u7684\u5e94\u7528\u7a0b\u5e8f\u53ea\u9700\u5728\u548c\u64cd\u4f5c\u7cfb\u7edf\u6c9f\u901a\u65f6\u5c06\u5904\u7406\u5668\u5207\u6362\u56de\u5b9e\u6a21\u5f0f\u3002DOS \u6269\u5145\u5668\u7684\u5f00\u53d1\u5f97\u76ca\u4e8e\u5fae\u8f6f\u7684\u52aa\u529b\uff0c\u4ed6\u4eec\u60f3\u628a Windows\uff0c\u5728\u770b\u4f3c\u6240\u6709\u5546\u4e1a\u8ba1\u7b97\u90fd\u5728 MS-DOS \u7684\u57fa\u7840\u4e0a\u8fd0\u884c\u7684\u60c5\u51b5\u4e0b\uff0c\u53d8\u6210\u547d\u4ee4\u884c\u754c\u9762\u7684\u53ef\u884c\u66ff\u4ee3\u54c1\u548c Macintosh \u7684\u53ef\u884c\u6311\u6218\u8005\u3002\u4e0d\u8fc7\u8fd9\u4e2a\u6545\u4e8b\u6700\u597d\u8fd8\u662f\u7559\u7ed9\u672a\u6765\u7684\u6587\u7ae0\u5427\uff0c\u5230\u65f6\u5019\u6211\u4eec\u4f1a\u8be6\u7ec6\u5206\u6790 Windows \u672c\u8eab\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u672c\u6b21\u6240\u8bb2\u8ff0\u7684\u6545\u4e8b\u5df2\u7ecf\u8ba9\u6211\u4eec\u987a\u5229\u5730\u8fdb\u5165\u4e86\u672c\u535a\u5ba2\u7684\u7535\u8111\u6e38\u620f\u5386\u53f2\u65f6\u4ee3\u3002</p> <p>\u5728\u8fd9\u4e2a\u65f6\u4ee3\uff0c\u6b64\u524d\u4e3b\u8981\u7528\u4e8e\u5546\u7528\u9886\u57df\u7684 MS-DOS \u673a\u5668\u9010\u6e10\u8fdb\u5165\u5bb6\u5ead\uff0c\u65f6\u5e38\u7528\u4e8e\u6e38\u73a9\u65b0\u4e00\u4ee3\u7684\u6e38\u620f\uff0c\u5b83\u4eec\u5145\u5206\u5229\u7528\u4e86\u6700\u65b0\u7cfb\u7edf\u914d\u5907\u7684 VGA \u56fe\u5f62\u3001\u58f0\u5361\u548c\u9f20\u6807\u3002\u6ca1\u90a3\u4e48\u597d\u7684\u4e8b\u60c5\u662f\uff0c\u6240\u6709\u60f3\u73a9\u8fd9\u4e9b\u65b0\u6e38\u620f\u7684\u4eba\u90fd\u5f97\u9762\u5bf9\u53ea\u80fd\u4ee5\u4e0d\u5b8c\u7f8e\u7684\u5f62\u5f0f\u56de\u907f\u7684 640 K \u4e4b\u5899\u3002\u6b63\u5982\u6211\u4eec\u6240\u89c1\uff0cEMS \u548c XMS \u90fd\u5728\u8bbf\u95ee\u975e\u5e38\u89c4\u5185\u5b58\u65f6\u589e\u6dfb\u4e86\u4e9b\u6027\u80fd\u5f00\u9500\u3002\u4f46\u6e38\u620f\u504f\u504f\u662f\u6240\u6709\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5bf9\u6027\u80fd\u6700\u654f\u611f\u7684\uff0c\u8fd9\u4f7f\u5f97 640 KiB \u7684\u9ad8\u901f\u5e38\u89c4\u5185\u5b58\u5bf8\u571f\u5bf8\u91d1\u3002</p> <p>\u5728 MS-DOS \u7edf\u6cbb\u6e38\u620f\u5e02\u573a\u7684\u5934\u4e9b\u5e74\u5934\uff0c\u5f00\u53d1\u4eba\u5458\u4e3a\u4e86\u89e3\u51b3\u548c\u8bbf\u95ee 640 KiB \u4ee5\u4e0a\u7684\u5185\u5b58\u6709\u5173\u7684\u95ee\u9898\uff0c\u5e72\u8106\u9009\u62e9\u4e86\u6839\u672c\u4e0d\u4f7f\u7528 640 KiB \u4ee5\u4e0a\u7684\u5185\u5b58\u3002\u4f46\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u65e2\u4e0d\u80fd\u6ee1\u8db3\u5f00\u53d1\u8005\u4eec\u5bf9\u81ea\u5df1\u7684\u6e38\u620f\u65e5\u6e10\u589e\u957f\u7684\u91ce\u5fc3\uff0c\u4e5f\u4e0d\u80fd\u8fbe\u5230\u6e38\u620f\u73a9\u5bb6\u4eec\u5bf9\u6e38\u620f\u6108\u53d1\u63d0\u9ad8\u7684\u671f\u5f85\u3002</p> <p>\u672a\u6765\u7684\u7b2c\u4e00\u4e2a\u9884\u5146\u662f 1990 \u5e74 9 \u6708 Origin Systems \u53d1\u5e03\u7684\u300a\u94f6\u6cb3\u98de\u5c06\u300b\uff08Wing Commander\uff09\u3002\u5728\u5f53\u5e74\u5b83\u65e2\u58f0\u540d\u8fdc\u626c\uff0c\u53c8\u4ee4\u4eba\u5bb3\u6015\uff0c\u62c5\u5fc3\u5b83\u4f1a\u4e0d\u4f1a\u5c06\u73b0\u4ee3\u7684\u9ad8\u7aef\u786c\u4ef6\u538b\u69a8\u5230\u6781\u81f4\u3002\u4f46\u5373\u4f7f\u662f\u300a\u94f6\u6cb3\u98de\u5c06\u300b\u4e5f\u6ca1\u6709\u4e25\u683c\u8981\u6c42\u8d85\u8fc7 640 KiB \u7684\u5185\u5b58\uff0c\u4f46\u5728\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u5b83\u6765\u8ba9\u73a9\u5bb6\u7684\u6e38\u620f\u4f53\u9a8c\u66f4\u52a0\u8212\u9002\u3002\u4f46\u5b83\u4f7f\u7528\u989d\u5916\u5185\u5b58\u7684\u65b9\u5f0f\u4e0d\u592a\u7075\u6d3b\uff1a\u5fc5\u987b\u4f7f\u7528 EMS \u5185\u5b58\uff0c\u800c\u4e0d\u662f XMS \u5185\u5b58\uff0c\u4e3a\u540e\u7eed\u6e38\u620f\u5f00\u521b\u4e86\u5148\u6cb3\u3002\u672a\u6765\u7684\u6e38\u620f\u73a9\u5bb6\u4e5f\u56e0\u6b64\u88ab\u8feb\u5bf9\u4e24\u79cd\u6807\u51c6\u7684\u533a\u522b\u548c\u5982\u4f55\u914d\u7f6e\u81ea\u5df1\u7684\u673a\u5668\u4f7f\u7528\u4f55\u79cd\u6807\u51c6\u4e86\u5982\u6307\u638c\u3002\u300a\u94f6\u6cb3\u98de\u5c06\u300b\u5f00\u521b\u7684\u53e6\u4e00\u4e2a\u5148\u6cb3\u662f\u5728\u201c\u5b89\u88c5\u6307\u5357\u201d\u4e2d\u5305\u62ec\u4e86\u4e00\u4e2a\u5fc5\u987b\u9605\u8bfb\u624d\u80fd\u8ba9\u6e38\u620f\u6b63\u5e38\u8fd0\u884c\u7684\u201c\u5185\u5b58\u4f7f\u7528\u201d\u7684\u6bb5\u843d\u3002\u5728\u672a\u6765\uff0c\u8fd9\u79cd\u6bb5\u843d\u53ea\u4f1a\u8d8a\u6765\u8d8a\u957f\u548c\u6666\u6da9\u96be\u61c2\uff0c\u957f\u671f\u53d7\u82e6\u53d7\u96be\u7684\u73a9\u5bb6\u5728\u8fd9\u4e0a\u9762\u4f7f\u51fa\u7684\u6ce8\u610f\u529b\u6bd4\u4efb\u4f55\u548c\u201c\u5982\u4f55\u73a9\u4ed6\u4eec\u8d2d\u4e70\u7684\u6e38\u620f\u201d\u6709\u5173\u7684\u5185\u5bb9\u8981\u591a\u5f97\u591a\u3002</p> <p></p> <p>Note</p> <p>\u5728 Accolade \u5bf9\u300aLeisure Suit Larry\u300b\u7684\u5c34\u5c2c\u6284\u88ad\u300aLes Manley in: Lost in LA\u300b\u4e2d\uff0c\u4e3b\u89d2\u5728\u4e00\u4e9b\u6210\u719f\u7684\u4f34\u4fa3\u65c1\u89e3\u91ca EMS \u548c XMS \u5185\u5b58\u3002\u8bbd\u523a\u7684\u662f\u4efb\u4f55\u60f3\u5728 MS-DOS \u673a\u5668\u4e0a\u73a9\u6700\u65b0\u6e38\u620f\u7684\u4eba\u771f\u7684\u77e5\u9053\u8fd9\u4e9b\u4e1c\u897f\uff0c\u6216\u8005\u81f3\u5c11\u6709\u77e5\u9053\u8fd9\u4e9b\u7684\u670b\u53cb\u3002</p> <p>\u4e8e\u662f\u4e00\u4e2a\u8fd1\u5341\u5e74\u7684\u5386\u53f2\u9636\u6bb5\u5f00\u59cb\u4e86\uff0c\u8ba9\u5c5e\u4e8e\u8fc7\u53bb\u65f6\u5149\u7684\u4eba\u4eec\u5728\u56de\u60f3\u8d77\u65f6\u4e0d\u4ec5\u5145\u6ee1\u4e86\u61ca\u607c\uff0c\u8fd8\u5e38\u5e38\u5939\u6742\u7740\u4e9b\u8bb8\u6000\u65e7\u7684\u60c5\u7ed3\u3002\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u73a9\u5bb6\u4eec\u603b\u662f\u8981\u82b1\u6570\u5c0f\u65f6\u65f6\u95f4\u6298\u817e MS-DOS \u7684 <code>config.sys</code> \u548c <code>autoexec.bat</code> \u6587\u4ef6\u3001\u6765\u56de\u66f4\u6362\u5404\u79cd\u5404\u6837\u7684\u7b2c\u4e09\u65b9\u5de5\u5177\uff0c\u7948\u7977\u7740\u80fd\u5728\u5e38\u89c4\u5185\u5b58\u91cc\u6324\u51fa\u6e38\u620f X \u9700\u8981\u7684\u6700\u540e\u51e0 KiB \u5185\u5b58\uff0c\u624b\u6bb5\u5c42\u51fa\u4e0d\u7a77\u3002</p> <p>\u5728\u5f00\u53d1 Windows \u7684\u8fc7\u7a0b\u4e2d\uff0c\u5fae\u8f6f\u53d1\u73b0\u591a\u4e8f\u4e86\u5176\u9ad8\u9f84\uff0cMS-DOS \u5185\u6838\u5176\u5b9e\u8db3\u591f\u5c0f\u5230\u53ef\u4ee5\u585e\u8fdb 1 MiB \u5185\u5b58\u4ee5\u5916\u7684\u7b2c\u4e00\u4e2a 64 KiB \u533a\u57df\u3002\u800c\u591a\u4e8f\u4e86 80286 \u548c\u540e\u7eed\u5904\u7406\u5668\u7684\u4e00\u4e2a\u672a\u516c\u5f00\u7684\u8bbe\u8ba1\u7f3a\u9677\uff0c\u8fd9\u5757\u5185\u5b58\u53ef\u4ee5\u5728\u5b9e\u6a21\u5f0f\u88ab\u5f53\u4f5c\u5e38\u89c4\u5185\u5b58\u6765\u8bbf\u95ee\u3002\u73a9\u5bb6\u4eec\u968f\u540e\u5b66\u5230\u4e86\u5728\u4ed6\u4eec\u7684\u914d\u7f6e\u6587\u4ef6\u91cc\u586b\u4e00\u884c <code>DOS=HIGH</code> \u6765\u5728\u5b9d\u8d35\u7684\u5e38\u89c4\u5185\u5b58\u4e2d\u91ca\u653e\u51fa\u4e00\u5757\u533a\u57df\u3002\u7c7b\u4f3c\u7684\uff0c\u5728\u7edd\u5927\u591a\u6570\u673a\u5668 384 KiB \u7684\u9ad8\u4f4d\u5185\u5b58\u7a7a\u95f4\u91cc\u6563\u843d\u7740\u8db3\u591f\u7684\u7a7a\u95f2\u7a7a\u95f4\u6765\u5b58\u653e DOS \u7684\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\uff0c\u800c\u65e0\u9700\u653e\u5728\u5e38\u89c4\u5185\u5b58\u91cc\u3002\u4e8e\u662f <code>DOS=HIGH</code> \u968f\u540e\u53d8\u6210\u4e86 <code>DOS=HIGH,UMB</code>\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u544a\u8bc9\u7535\u8111\u4f7f\u7528\u6240\u8c13\u7684\u201c\u9ad8\u4f4d\u5185\u5b58\u5757\u201d\uff08upper-memory blocks\uff09\uff0c\u8fdb\u800c\u53c8\u7701\u4e0b\u82e5\u5e72 KiB \u7684\u7a7a\u95f4\u3002</p> <p>\u8fd9\u4e9b\u53ea\u80fd\u7b97\u662f\u8d77\u59cb\u70b9\uff0c\u662f\u6700\u57fa\u672c\u7684\u6280\u5de7\u3002\u53ef\u4ee5\u8bf4\uff0c\u4e8b\u60c5\u4ece\u6b64\u4ee5\u540e\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u4e86\uff0c\u6f14\u53d8\u6210\u9519\u7efc\u590d\u6742\u7684\u7cbe\u7ec6\u8c03\u6574\uff0c\u4ece\u5728\u5e38\u89c4\u5185\u5b58\u4e2d\u8282\u7701\u51e0 KiB \u53d8\u6210\u4ec5\u4ec5\u51e0\u4e2a\u5b57\u8282\uff0c\u4f46\u5bf9\u4e8e\u5b9e\u73b0\u68a6\u60f3\u3001\u5728 1993 \u5e74\u8fd0\u884c\u9700\u8981\u4ece 640 KiB \u4e2d\u62ff\u8d70 604 KiB \u7684\u6e38\u620f\u7684\u8fd9\u4ef6\u4e8b\u4e0a\uff0c\u5b83\u4eec\u90fd\u540c\u7b49\u7684\u91cd\u8981\u3002\u5c3d\u7ba1\u5f53\u65f6\u7684\u673a\u5668\u4e00\u822c\u90fd\u6709\u82e5\u5e72 MiB \u7684\u5185\u5b58\uff0c\u673a\u4e3b\u4eec\u5374\u4e0d\u5f97\u4e0d\u4e3a\u4e86\u533a\u533a\u51e0\u5b57\u8282\u548c\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u95f4\u6765\u56de\u62c9\u626f\uff0c\u96be\u514d\u8ba9\u4eba\u89c9\u5f97\u6ed1\u7a3d\u597d\u7b11\u3002\u6bcf\u4e2a\u65b0\u7684\u6e38\u620f\u90fd\u8bd5\u7740\u6311\u6218\u6781\u9650\uff0c\u7d22\u53d6\u8d8a\u6765\u8d8a\u591a\u7684\u5e38\u89c4\u5185\u5b58\u3002\u90a3\u4e9b\u6027\u683c\u5f00\u6717\u6216\u8005\u6709\u6280\u672f\u5934\u8111\u7684\u4eba\u5c31\u628a\u6bcf\u6b21\u8d39\u52b2\u8ba9\u4e70\u56de\u6765\u7684\u6e38\u620f\u8dd1\u8d77\u6765\u8fd9\u4ef6\u4e8b\u60c5\u5f53\u505a\u4e00\u4e2a\u6e38\u620f\u6765\u770b\u3002\u5176\u4ed6\u4eba\u5219\u6376\u80f8\u987f\u8db3\uff0c\u65e0\u6570\u6b21\u540e\u6094\u81ea\u5df1\u4e3a\u4ec0\u4e48\u6ca1\u6709\u65e9\u65e9\u4e70\u62ff\u6765\u5c31\u80fd\u73a9\u7684\u6e38\u620f\u4e3b\u673a\u3002\u552f\u4e00\u4f7f\u8fd9\u4e00\u5207\u503c\u5f97\u7684\u5c31\u662f\u5f53\u4f60\u7ec8\u4e8e\u628a\u4e00\u5207\u8c03\u6574\u5f97\u670d\u670d\u5e16\u5e16\uff0c\u770b\u5230\u4e86\u6807\u9898\u753b\u9762\uff0c\u542c\u5230\u4e86\u4e3b\u9898\u97f3\u4e50\u65f6\uff0c\u90a3\u79cd\u5982\u91ca\u91cd\u8d1f\u3001\u81ea\u8c6a\u548c\u6ee1\u8db3\u611f\u5939\u6742\u5728\u4e00\u8d77\u7684\u611f\u89c9\uff08\u524d\u63d0\u662f\u4f60\u5728\u6298\u78e8\u4e4b\u4e2d\u914d\u7f6e\u597d\u4e86\u81ea\u5df1\u7684\u58f0\u5361\uff09\u3002\u8fd9\u5c31\u662f MS-DOS \u73a9\u5bb6\u7684\u751f\u6d3b\u3002</p>"},{"location":"2024/01/01/640-k-%E4%B9%8B%E5%A2%99/#_8","title":"\u76d6\u8328\u7684\u540d\u8a00","text":"<p>\u548c\u591a\u5e74\u6765\u4e00\u76f4\u88ab\u6b64\u6298\u78e8\u7684\u4eba\u4eec\u4e00\u6837\uff0c\u6211\u4eec\u5f88\u96be\u628a 640 K \u4e4b\u5899\u629b\u5728\u8111\u540e\u3002\u4f46\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u804a\u804a\u6bd4\u5c14\u00b7\u76d6\u8328\u636e\u79f0\u5728 1981 \u5e74\u7684\u5c55\u4f1a\u4e0a\u6240\u4f5c\u51fa\u7684\u8bf4\u6cd5\uff1a\u201c640 K \u7ed9\u8c01\u7528\u90fd\u591f\u4e86\uff08640 K ought to be enough for anybody\uff09\u201d\u3002\u8fd9\u53e5\u8bdd\u88ab\u5f53\u4f5c\u8ba1\u7b97\u673a\u884c\u4e1a\u7684\u4f20\u8bf4\uff0c\u5728\u6570\u5e74\u95f4\u88ab\u4eba\u4eec\u53e3\u53e3\u76f8\u4f20\u3002\u4f3c\u4e4e\u5f88\u7b26\u5408\u5927\u5bb6\u5bf9\u6bd4\u5c14\u00b7\u76d6\u8328\u7684\u523b\u677f\u5370\u8c61\uff1a\u4e00\u4e2a\u6ca1\u6709\u60f3\u8c61\u529b\u7684\u80ae\u810f\u9a97\u5b50\uff0c\u548c\u53f2\u8482\u592b\u00b7\u4e54\u5e03\u65af\u7684\u771f\u8bda\u800c\u6709\u8fdc\u89c1\u7684\u5f62\u8c61\u76f8\u5bf9\uff08\u4f46\u4e0d\u5fc5\u591a\u8bf4\uff0c\u4e8b\u5b9e\u4e0a\u8fdc\u6bd4\u6b64\u66f4\u52a0\u590d\u6742\uff09\u3002\u4f46\u5bf9\u6301\u6709\u523b\u677f\u5370\u8c61\u7684\u4eba\u6765\u8bf4\uff0c\u5f88\u9057\u61be\u7684\u662f\u8fd9\u4e2a\u4f20\u8bf4\u5c31\u548c\u522b\u7684\u4f20\u8bf4\u4e00\u6837\uff0c\u53ef\u4ee5\u51e0\u4e4e\u786e\u5b9a\u6ca1\u6709\u53d1\u751f\u8fc7\u3002\u7b2c\u4e00\uff0c\u76d6\u8328\u672c\u4eba\u5c31\u575a\u51b3\u5426\u8ba4\u81ea\u5df1\u8bf4\u8fc7\u8fd9\u6837\u7684\u8bdd\uff1b\u7b2c\u4e8c\uff0c\u300a\u8036\u9c81\u540d\u8a00\u5927\u5168\uff08The Yale Book of Quotations\uff09\u300b\u7684\u4f5c\u8005 Fred Shapiro \u5728 2008 \u5e74\u4e3a\u4e86\u8fd9\u53e5\u8bdd\u6df1\u5165\u5bfb\u627e\u4e86\u53ef\u4fe1\u6765\u6e90\uff0c\u4ee5\u81f3\u4e8e\u5728\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\u516c\u5f00\u6c42\u63f4\uff0c\u5e0c\u671b\u627e\u5230\u8fd9\u6837\u6d88\u606f\u6765\u6e90\u7684\u4eba\u80fd\u8054\u7cfb\u4ed6\u3002\u4e0a\u767e\u4eba\u8fd9\u4e48\u505a\u4e86\uff0c\u4f46\u6ca1\u6709\u4e00\u4e2a\u80fd\u62ff\u51fa\u4ed6\u60f3\u8981\u627e\u5230\u7684\u8bc1\u636e\uff0c\u4e8e\u662f\u4ed6\u66f4\u52a0\u786e\u4fe1\u8fd9\u53e5\u8bdd\u201c\u771f\u5b9e\u6027\u5b58\u7591\u201d\u3002\u558f\uff0c\u5c31\u662f\u8fd9\u6837\u3002\u4f60\u53ef\u4ee5\u56e0\u4e3a\u8fd9\u4e2a\u7834\u70c2\u4e0d\u582a\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4f5c\u4e3a\u6211\u8fd9\u7bc7\u6587\u7ae0\u63cf\u8ff0\u7684\u5404\u79cd\u5404\u6837\u95ee\u9898\u7684\u6839\u6e90\uff0c\u968f\u4fbf\u8d23\u5907\u6bd4\u5c14\u00b7\u76d6\u8328\uff0c\u4f46\u522b\u8ba4\u4e3a\u4ed6\u8db3\u591f\u7b28\u5230\u8bf4\u51fa\u90a3\u53e5\u8bdd\u3002\u76d6\u8328\u5728 2008 \u5e74\u8bf4\uff1a\u201c\u6ca1\u6709\u4efb\u4f55\u8ba1\u7b97\u673a\u4ece\u4e1a\u8005\u4f1a\u8bf4\u51fa\u2018\u4e00\u5b9a\u91cf\u7684\u5185\u5b58\u5c31\u80fd\u6ee1\u8db3\u6240\u6709\u65f6\u95f4\u7684\u9700\u8981\u4e86\u2019\u8fd9\u53e5\u8bdd\u201d\u3002\u6240\u6709\u6000\u7591\u8fd9\u53e5\u8bdd\u7684\u4eba\u53ea\u9700\u8981\u770b\u770b IBM PC \u7684\u5386\u53f2\u5c31\u591f\u4e86\u3002</p> <ol> <li> <p>\u662f\u7684\uff0c\u8fd9\u5927\u6982\u662f\u6211\u5199\u8fc7\u7684\u6700\u4e2d\u4e8c\u7684\u8bdd\u4e86\u3002\u00a0\u21a9</p> </li> <li> <p>\u8bd1\u6ce8\uff1a\u672c\u6587\u8457\u4e8e 2017 \u5e74 4 \u6708\uff0c\u5f53\u65f6\u7684 Mac \u7535\u8111\u5747\u57fa\u4e8e x86 \u67b6\u6784\u3002\u57fa\u4e8e ARM \u67b6\u6784\u7684 Mac \u7535\u8111\u4e8e 2020 \u5e74\u53d1\u5e03\u3002\u00a0\u21a9</p> </li> <li> <p>\u8bd1\u6ce8\uff1a\u539f\u6587\u4e3a\u201cno visionary has 20-20 vision\u201d\uff0c20-20 \u6307\u5728\u89c6\u529b\u6d4b\u8bd5\u4e2d\u80fd\u770b\u6e05 20 \u82f1\u5c3a\u4ee5\u5916\u7684\u7269\u4f53\u3002\u00a0\u21a9</p> </li> <li> <p>\u8bd1\u6ce8\uff1a\u6b64\u8f66\u8f86\u751f\u4ea7\u4e8e 1908 \u81f3 1927 \u5e74\uff0c\u88ab\u89c6\u4f5c\u5386\u53f2\u4e0a\u7b2c\u4e00\u6b3e\u666e\u901a\u5bb6\u5ead\u80fd\u8d1f\u62c5\u7684\u6c7d\u8f66\u3002\u00a0\u21a9</p> </li> <li> <p>\u8bd1\u6ce8\uff1a\u539f\u6587\u4e3a\u201cone mother of an ugly kludge\u201d\uff0c\u786e\u5b9e\u96be\u542c\u3002\u00a0\u21a9</p> </li> </ol>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/","title":"The State of The Windows App SDK","text":"<p>It\u2019s spring time! Come and see Microsoft\u2019s latest and greatest installment of the famous long-running series: Who Wants to Make The Best UI Framework! This article contains insights on things to pay attention to, and a quick tour for getting started for everyone interested in developing apps with the Windows App SDK.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#history","title":"History","text":"<p>Actually, the Windows App SDK traces back to the time of Windows 8 (again?).</p> <p>Can you maybe talk about something other than Windows 8 please?</p> <p>Woah, woah, hang on there. Of course there is way more stuff for me to talk about other than Windows 8. But just for the record, please allow me to finish this (at least I tried to make it so) brief history lesson.</p> <p>For the full version to this brief excerpt, see A Rant About The Consistency of Windows. This chapter is more like a continuation of the chapter Project Reunion in the post.</p> <p>If you are really on a busy day, skip to Getting started.</p> Do I really hate Windows 8? <p>Short version: I don\u2019t hate Windows 8, period.</p> <p>Long version: While the number of reasons for one to hate Windows 8 may be astronomical, credit where credit is due: it is still a great step forward for such a creaking grandma OS like Windows, in which lots of critical and fundamental changes (that nobody recognized) have been implemented under the hood to modernize the system, which also set the foundation for Windows 10\u2019s success. I personally do not blame Microsoft for aggressive technological advancements (or catch-ups, to be honest). I even have a Windows 8.1 virtual machine as my sandbox for its lightness (compared with Windows 10) and snappiness, yet it is still a relatively modern Windows system that can run most applications just fine.</p> <p>And hey, smileys! When your system unfortunately crashes again for that goddamn NVIDIA or AMD driver, certainly a :( face is way friendlier than a cryptic, white-text-on-blue screen right?</p> <p>The TL;DR is that when Windows 8 was launched in 2012, along is the new, flat design language (formerly called Metro or Modern), whose UI framework was named as WinUI. Following the unfortunate trainwreck, Microsoft performed a major overhaul upon Windows\u2019s visual design. The result of which is Windows 10, with a new design language that is now called Microsoft Design Language 2. And the name of the framework for this is? You guessed it right: WinUI 2.</p> <p>But apparently, even with the launch of Windows 10, there are still plenty of apps that took advantage of neither WinUI nor WinUI 2. These are apps that draw their own interfaces in other ways, like old Win32 MFC, WinForms, WPF, Qt, GTK, Electron, etc. While others might be beyond Microsoft\u2019s ability to intervene with, the first three are developed and maintained entirely by Microsoft. Thus looking at this mess, Microsoft planned to make something to unite all these scattered frameworks, something codenamed Project Reunion. The UI framework of which is officially called WinUI 3. And when Project Reunion reached its first 1.0 stable release, it was called the Windows App SDK, which suggests that it\u2019s now the official Microsoft technology for building native apps on Windows. To summarize it all up:</p> Windows version Design language UI framework Windows 8 / 8.1 MDL / \u201cMetro\u201d WinUI Windows 10 MDL 2 / Fluent WinUI 2 Windows 11 Fluent 2 WinUI 3"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#knowing-the-benefits-and-limitations","title":"Knowing the benefits and limitations","text":"<p>Bear in mind that the Windows App SDK can be seen as a spiritual successor to the Universal Windows Platforms (UWP). Thus many features and syntaxes in UWP development are passed along to Windows App SDK as well.</p> <p>Like with UWP, when you are developing apps with the Windows App SDK, the most obvious benefit is having access to all modern Windows controls and their designs. You no longer have to worry about display scaling factors, light/dark mode detection, etc.</p> <p>So what makes it different from UWP, other than its name? What are the benefits, limitations and caveats of using it? I\u2019ll list a few points worth mentioning (not comprehensive):</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#packaged-and-unpackaged","title":"Packaged and unpackaged","text":"<p>Before XAML Islands and Windows App SDK, the only way to use modern Windows controls (without some black magic wizardry) is to develop a \u201cpackaged\u201d app, which is sandboxed, uses WinRT APIs and have no direct access to Win32 APIs, heck, even JITs are not allowed (hence the development of .NET Native). Those strict restrictions severely limited what developers can do: you either pick a fancy interface and have your arms and legs tied up, or pick an older interface and enjoy the freedom of ransacking through everywhere where UAC is absent. Although Microsoft did later allow traditional \u201cdesktop apps\u201d to be packaged and avoid being sandboxed, accessing modern Windows controls and WinRT APIs is still a hurdle.</p> <p>The Windows App SDK allows both packaged and unpackaged apps, meaning that unpackaged apps can easily access those APIs as well. Even if your app is packaged, you can opt out of sandboxing, effectively bypassing the limits on UWP apps.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#benefits","title":"Benefits","text":"<p>There are certainly benefits from migrating to such a new framework, here are some of the examples:</p> <ul> <li>(For .NET developers) Access to .NET features otherwise unavailable to UWP development</li> <li>Packaged and unpackaged option</li> <li>Access to all Win32 APIs via P/Invoke</li> <li>Access to WinRT APIs under <code>Windows</code> namespace<sup>1</sup></li> <li>Access to modern, native Windows controls</li> <li>Access to Windows materials (Acrylic and Mica)<sup>2</sup></li> <li>Access to Chromium Edge-powered WebView2 control</li> <li>Automatic display scaling support</li> <li>Automatic system accent theming support</li> <li>Automatic light/dark mode support</li> <li>Automatic, responsive layout options</li> <li>UX stack decoupled from OS (Windows 11 style on Windows 10)</li> <li>Compile-time, powerful <code>{x:Bind}</code> binding instead of runtime, reflection-based <code>{Binding}</code></li> <li>Implicit and connected animations</li> <li>Text rendering with DirectWrite</li> <li>Composition and animation with DirectX</li> </ul>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#limitations","title":"Limitations","text":"<p>These are some of the features available in older frameworks but absent in the current version of Windows App SDK. You might want to take a look at these to see if those trade-offs are worth making the switch.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#no-ui-preview-in-ide","title":"No UI preview in IDE","text":"<p>Available on: WinForms, WPF, UWP, Qt, or anything remotely modern.</p> <p>This is the numer uno hurdle that is most annoying and has been troubling me the most. Familiar with WinForms or WPF development? Remember the Preview tab showing you what your product may look like? You like using Blend? Bam! Gone!</p> No UI preview is available in Visual Studio, same for Blend Some rants <p>Gee, Microsoft, you are a multi-trillion-dollar corporation, yet you didn\u2019t even bother to implement such basic feature in your flagship product: the Visual Studio IDE. If making a UI preview does not earn you any extra money, then you should stop making WinUI 3 altogether, since apparently it does not earn you any extra money either, why not just, once again, put those R&amp;D budget to Azure?</p> <p>When Windows App SDK was released, I was shocked to see that there is not even a sign of a UI designer, not even preview. It is not even on the freaking roadmap. And apparently Microsoft\u2019s idea is that \u201cbut you can use Hot Reload and Live Visual Tree!\u201d So do not expect to have it in the near future.</p> <p>More resources: GitHub discussion , Windows App SDK roadmap .</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#missing-windowing-apis","title":"Missing windowing APIs","text":"<p>The ironic fact is that the Windows App SDK is lacking some windowing APIs available on older frameworks. Here are some of the stuff that you do not have control over out-of-the-box:</p> <ul> <li>Initial size, title and window icon</li> <li>Initial location (default / center of screen)</li> <li>Maximum and minimum height and width (both initial and runtime)</li> <li>Window resize mode</li> <li>Topmost state</li> <li>Can be maximized / minimized</li> <li>Programmatic maximization / minimization</li> </ul> <p>In the early days of Windows App SDK, you don\u2019t even have out-of-the-box control over window title.</p> <p>Fortunately you can regain all these missing abilities with the amazing WinUIEx  package. In case if you missed yet another ironic fact: even Microsoft\u2019s own WinUI 3 template project is using it as a workaround for many missing features, including \u2014 that\u2019s right: setting default window title.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#no-net-native","title":"No .NET Native","text":"<p>.NET Native is born to meet the restriction of UWP where no JIT is allowed during runtime. As its name implies, instead of the normal lifecycle of .NET, in which code files are compiled into the CIL intermediate format during compile time, and then dynamically interpreted and executed by JIT during runtime, the .NET Native toolchain compiles the emitted intermediate format straight into binary instructions that match target platform architecture. The result of which is vastly superior application performance and overall snappier user experience that rivals some of those written in C++<sup>3</sup>.</p> <p>However in all these years, .NET Native seemed to be and remained exclusive to UWP development. It\u2019s pity that no one can enjoy it when building anything that is not UWP. Thus you\u2019ll lose that as well if you use the Windows App SDK for development.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#no-xbox-support","title":"No Xbox support","text":"<p>Your app built with the Windows App SDK, even if packaged as MSIX, cannot be installed or run on Xbox devices. Likewise, without explicit implementation, users on desktop cannot navigate in your app with the Xbox Controller like they could with UWP apps, either.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#too-much-boilerplate","title":"Too much boilerplate","text":"<p>This is technically not a limitation, but rather a design failure. It will not limit you from doing anything, but rather cripple your development flow.</p> <p>Just the default template project created with Template Studio has more than 20 boilerplate files serving different purposes, and by default your app is based on Dependency Injection (a tough concept for many beginners). Plus, your solution is split into two projects: <code>ProjectName</code> and <code>ProjectName.Core</code>, for cross-platform portability reasons.</p> Seriously? <p>Hear me out: it is way too complicated for just a template, and can be overwhelming for even seasoned developers, let alone first-timers trying native Windows development. With each new project, developers have to waste hours examining the template and making necessary adjustments, before being able to do any practical development. There shouldn\u2019t be this many boilerplates in a template project, and you shouldn\u2019t have carved an entire application architecture for developers, either. This much code should be put somewhere else as a \u201creference project\u201d, or be transformed into a tutorial for building applications with such design paradigm. A \u201ctemplate\u201d should be as simple as which in Windows Forms and WPF, with only the bare minimum to get an application running, instead of functional.</p> <p>Even worse, much of what the boilerplate files did is botches and patches for problems that shouldn\u2019t have existed in the first place, and could have been integrated into the Windows App SDK ages ago. Those are framework-level problems, and there are tens of thousands of possible ways of fixing them available for choose, yet the one chosen by Microsoft is the stupidest among the stupidest: by including workarounds in every single template project, thus integrating them into all apps built with the SDK. This effectively planted bombs in every single app built with the Windows App SDK. And in the future, extra workarounds may be required for the workarounds implemented by those apps and now causing troubles, and this time you cannot simply fix them by changing templates. Templates are permanent, fixed at the start of development, and cannot be easily changed during lifetime like frameworks and dependencies are. Nobody wants the death spiral of workarounds, workarounds for workarounds, workarounds for workarounds for workarounds, etc.</p> <p>Fortunately, you can start from scratch, relatively easily, actually. And that will be my recommended approach to developing with the Windows App SDK as well. Kinda like using Arch Linux or Gentoo, where you have full knowledgement of what you have now and what you\u2019ve changed before, instead of other well-equipped distros that come with a graphical user interface by default.</p> <p>But the unfortunate fact is that by going this way, you are now the one to write boilerplates to fix problems that should have been fixed by Microsoft. You must face the fact that there is no way around boilerplates when developing with the Windows App SDK, regardless if you choose to go with templates or start from scratch.</p> Pre-defined, hard-coded values?"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#getting-started","title":"Getting started","text":"<p>If you\u2019re happy to accept those challenges, let\u2019s jump right in.</p> <p>This tutorial is more for people with some C# and WPF development experience. If you have no previous experience, it may be really not for you.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#choosing-tools","title":"Choosing tools","text":"<p>There really isn\u2019t much to talk about the tool choices, as the number of available picks in the C# ecosystem is nowhere near Java.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#visual-studio","title":"Visual Studio","text":"<p>The most obvious is Microsoft\u2019s own  Visual Studio . You will need Visual Studio 2022 or later for development with the Windows App SDK. When installing, choose at least \u201c.NET Desktop Development\u201d workload and \u201cWindows App SDK C# Templates\u201d under optional components in the \u201cInstallation details\u201d sidebar.</p> <p>Template Studio</p> <p>If you really want a wizard-based experience for creating project templates (that yourself may need an awful lot of time to comprehend) tailored to your needs. You can download the Template Studio plugin for Visual Studio here .</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#jetbrains-rider","title":"JetBrains Rider","text":"<p>The second is  Rider  by JetBrains. It offers powerful and comprehensive debugging tools like Predictive Debugger, and has great support for XAML development. Its auto-import and formatting is way more reliable than Visual Studio (for whatever reason auto-import breaks all the time and is nearly unusable on my Visual Studio installation), and IMHO, offers better overall experience for .NET development.</p> <p>Rider has no full support for Windows App SDK projects</p> <p>If you\u2019ve decided to go with Rider, you should know that Rider has no full support for Windows App SDK projects yet. While regular code editing, autocompletion, code analysis are ok, debugging is borked (see RIDER-68942  for details), meaning that you may still need Visual Studio for complete development experience. This tutorial will focus on development flow with Visual Studio and may not cover Rider in all cases.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#creating-the-project","title":"Creating the project","text":"<p>Deciding the scale of your project</p> <p>Your project may be large: a fully-fledged CRM system with all kinds of bells and whistles, or small: a simple utility or widget with one focused goal. You need to pick different architectures for different kinds of projects with different purposes and requirements on scalability. This decides the template you choose.</p> <p>Now that you have the required tools, you can create your first project. Depending on the scale of your project, you may either choose to start from an empty canvas (recommended) or with Template Studio to set up everything for you.</p> <ul> <li>To start with Template Studio: when creating the new project, search for \u201cTemplate Studio for WinUI\u201d, and follow instructions.</li> <li>To start from scratch: when creating the new project, search for \u201cBlank app, packaged (WinUI 3 on Desktop)\u201d.</li> </ul>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#boilerplates","title":"Boilerplates","text":"<p>If you created your new project with Template Studio, then all required boilerplates are already in place.</p> <p>If not, depending on the scale of your project, you may want to consider adding the following boilerplates. Those are not necessary for development, but might make your life a bit easier.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#basic-setup","title":"Basic setup","text":"<p>Here are some basic setup steps regardless of the scale of your application.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#restoring-windowing-apis","title":"Restoring windowing APIs","text":"<p>To restore missing windowing functionalities, consider installing the <code>WinUIEx</code> package:</p> <p>In your IDE, search for the <code>WinUIEx</code> package in NuGet Tool, or with command line:</p> <pre><code>dotnet add package WinUIEx\n</code></pre> <p>Then, change the base class of the windows in your application to <code>WinUIEx.WindowEx</code> by:</p> <ol> <li>In the <code>.xaml</code> file of your target window, add <code>xmlns:winuiex=\"using:WinUIEx\"</code> to your <code>Window</code> element, making it look like:     <pre><code>&lt;Window\n    ...\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    xmlns:winuiex=\"using:WinUIEx\"\n    ...\n</code></pre></li> <li>Change the base class of your <code>Window</code> element to <code>winuiex:WindowEx</code>:     <pre><code>&lt;winuiex:WindowEx\n    ...\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    xmlns:winuiex=\"using:WinUIEx\"\n    ...\n</code></pre></li> <li>In the <code>.xaml.cs</code> file of the window, either just directly remove the base class annotation, and you\u2019re done:     <pre><code>public sealed partial class MainWindow\n</code></pre>     This is acceptable because it is a <code>partial</code> class. Or you can import the namespace <code>WinUIEx</code> and change the base class type to <code>WinUIEx.WindowEx</code>.</li> </ol> <p>You can visit the project\u2019s homepage  for more information on its usage.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#setting-up-branding","title":"Setting up branding","text":"<p>As WinUI applications are now based on .NET, the recommended approach to changing the attributes and metadata of output assembly is no longer attributes in <code>AssemblyInfo.cs</code>, but rather manipulating values in the <code>.csproj</code> project file directly.</p> <p>To set application icon:</p> <ol> <li>Create <code>Assets</code> folder in your project if not present<sup>4</sup>.</li> <li>Put your application icon (preferably both <code>.ico</code> and <code>.png</code>) inside it.</li> <li>Select the file(s) in Solution Explorer, make sure to have the following properties set:<ol> <li>Build Action: <code>Content</code>.</li> <li>Copy to Output Directory: <code>Always</code>.</li> </ol> </li> <li>Edit the <code>.csproj</code> file, add the following line:     <pre><code>&lt;ApplicationIcon&gt;Assets\\Icon.ico&lt;/ApplicationIcon&gt;\n</code></pre>    You can also group it with other metadata with a <code>PropertyGroup</code> like:     <pre><code>&lt;PropertyGroup&gt;\n  &lt;!-- File description --&gt;\n  &lt;AssemblyTitle&gt;Lorem ipsum Utility - The Lorem ipsum Generator&lt;/AssemblyTitle&gt;\n  &lt;!-- Assembly name --&gt;\n  &lt;Product&gt;Lorem ipsum Utility&lt;/Product&gt;\n  &lt;Copyright&gt;Copyright \u00a9 2024, Contoso Inc.&lt;/Copyright&gt;\n  &lt;Company&gt;Contoso Inc.&lt;/Company&gt;\n  &lt;!-- Icon of output .exe assembly --&gt;\n  &lt;ApplicationIcon&gt;Assets\\Icon.ico&lt;/ApplicationIcon&gt;\n&lt;/PropertyGroup&gt;\n</code></pre></li> <li> <p>For every window that you want to set icon as such, add this line to your constructor:     <pre><code>AppWindow.SetIcon(Path.Combine(AppContext.BaseDirectory, \"Assets/Icon.ico\"));\n</code></pre>    You may need to import the following namespaces:     <pre><code>using Microsoft.UI.Windowing;\nusing System;\nusing System.IO;\n</code></pre></p> <p>Absolute path is required for the <code>AppWindow.SetIcon()</code> API</p> <p>Unfortunately <code>AppWindow.SetIcon()</code> is just a P/Invoke wrapper for the underlying Win32 API and does not accept relative paths. Thus a <code>Path.Combine()</code> function call is required to get the absolute path to our icon file.</p> <p>If you specified an invalid path, no exceptions will be thrown to remind you that something has gone wrong, but you will see no icon in the Alt+Tab UI as a result.</p> </li> </ol> <p>With application icon set up, if you followed the steps above and created a <code>PropertyGroup</code> in your project file, simply modify those values to change other attributes.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#changing-window-title","title":"Changing window title","text":"<p>If you have already installed the <code>WinUIEx</code> package with the steps above, you can simply change the <code>Title</code> property in XAML file to change window title (just like the good old days before with WPF).</p> <p>If not, or you want to change window title programmatically, use (preferably in the constructor of your window):</p> <pre><code>AppWindow.Title = \"My Awesome App\";\n</code></pre>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#setting-up-system-dialogs","title":"Setting up system dialogs","text":"<p>Unfortunately you will need to perform the setups every single time you use any system dialog types (except <code>ContentDialog</code>, which is drawn by the app itself) like:</p> <ul> <li><code>Windows.UI.Popups.MessageDialog</code></li> <li><code>Windows.Storage.Pickers.FileOpenPicker</code></li> <li><code>Windows.Storage.Pickers.FileSavePicker</code></li> </ul> <p>Before calling the function to show the dialog, you will need to \u201cinitialize\u201d it:</p> <pre><code>InitializeWithWindow.Initialize(dialog, WindowNative.GetWindowHandle(this));\n</code></pre> <p>To call this function, you need to import the <code>WinRT.Interop</code> namespace.</p> <p>Fortunately, once again, if you have installed the <code>WinUIEx</code> package, you can call the corresponding extension methods to create dialogs that are already initialized with the window:</p> <pre><code>var messageDialog = this.CreateMessageDialog(\n    \"The application has encountered a critical error and will be closing now.\",\n    \"Critical Error\");\nvar fileSaveDialog = this.CreateSaveFilePicker();\nvar fileOpenDialog = this.CreateOpenFilePicker();\n</code></pre>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#setting-up-contentdialog","title":"Setting up <code>ContentDialog</code>","text":"<p>As of writing, for whatever reason, the default style of <code>ContentDialog</code> is not automatically applied, resulting in missing opening/entrance animation (it just pops open) and thus a bad, inconsistent user experience. See GitHub issue #5573 , #8476  for more information. This bug has been present since July 2021, and hasn\u2019t been fixed for almost 3 years, requiring developers to use workarounds, while once again highlighting Microsoft\u2019s commitment issue.</p> <p>You will also need to specify the <code>ContentDialog</code>\u2019s <code>XamlRoot</code> property to kind of \u201cset which window it needs to be attached to\u201d.  </p> <p>Fortunately you can fix this relatively simply by just two lines:</p> <pre><code>dialog.Style = Application.Current.Resources[\"DefaultContentDialogStyle\"] as Style;\ndialog.XamlRoot = Content.XamlRoot;\n</code></pre> <p>Or if you hate leaving hard-coded litter everythere, consider creating an extension method:</p> <pre><code>using Microsoft.UI.Xaml;\nusing Microsoft.UI.Xaml.Controls;\n\nnamespace MyAwesomeApp.Extensions;\n\npublic static class ContentDialogExtensions\n{\n    public static void ApplyFixesMicrosoftDidNotBotherTo(this ContentDialog contentDialog, Window baseWindow)\n    {\n        contentDialog.Style = Application.Current.Resources[\"DefaultContentDialogStyle\"] as Style;\n        contentDialog.XamlRoot = baseWindow.Content.XamlRoot;\n    }\n}\n</code></pre> <p>And later call it for every <code>ContentDialog</code> you create:</p> <pre><code>var updateDialog = new ContentDialog\n{\n    PrimaryButtonText = \"OK\",\n    DefaultButton = ContentDialogButton.Primary,\n    Title = \"Friendly Alert\",\n    Content = \"Hey, time to update your Windows!\"\n};\nupdateDialog.ApplyFixesMicrosoftDidNotBotherTo(this);\n\nawait updateDialog.ShowAsync();\n</code></pre> <p>Or even better, you can create an extension method that performs fixes and shows the dialog in one call:</p> <pre><code>public static Task&lt;ContentDialogResult&gt; ShowWithFixesAsync(this ContentDialog contentDialog, Window baseWindow)\n{\n    contentDialog.Style = Application.Current.Resources[\"DefaultContentDialogStyle\"] as Style;\n    contentDialog.XamlRoot = baseWindow.Content.XamlRoot;\n\n    return contentDialog\n        .ShowAsync()\n        .AsTask();\n}\n</code></pre>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#adding-mica-and-acrylic-material-support","title":"Adding Mica and Acrylic material support","text":"<p>Acrylic  is the default material in Windows 10 and Mica  is the default material in Windows 11.</p> <p>To use Acrylic as the base material for your app window, add the following lines to your XAML file under <code>Window</code> node:</p> <pre><code>&lt;Window.SystemBackdrop&gt;\n    &lt;DesktopAcrylicBackdrop/&gt;\n&lt;/Window.SystemBackdrop&gt;\n</code></pre> <p>Likewise, to use Mica:</p> <pre><code>&lt;Window.SystemBackdrop&gt;\n    &lt;MicaBackdrop/&gt;\n&lt;/Window.SystemBackdrop&gt;\n</code></pre> <p>For all pages displayed in the window, remember to clear the <code>Background</code> property if present.</p> <p>But what if we want the app to use Mica where possible (Windows 11), and Acrylic as fallback? Luckily we can detect Windows version and programmatically set base material in window constructor:</p> <pre><code>// Set Mica or Acrylic backdrop according to system version\nif (Environment.OSVersion.Version.Build &gt;= 22000)\n    SystemBackdrop = new MicaBackdrop();\nelse\n    SystemBackdrop = new DesktopAcrylicBackdrop();\n</code></pre> Detecting Windows 11 <p>As of writing, Microsoft did not publish any official way to detect if current Windows version is Windows 11. The most reliable way seems to be checking build number: the initial release of Windows 11\u2019s system version reads <code>10.0.22000.0</code>, thus anything \u2265 22000 is Windows 11, and anything less than 22000 is Windows 10.</p> <p>There is one caveat: to detect Windows version reliably without the system API triggering compatibility mode and returning <code>6.2.9200.0</code> (the version of Windows 8), you will need to explicitly declare that you support Windows 10 (and later) in your <code>app.manifest</code> file:</p> <pre><code>&lt;compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\"&gt;\n  &lt;application&gt;\n    &lt;!-- The ID below informs the system that this application is compatible with OS features first introduced in Windows 10. \n    It is necessary to support features in unpackaged applications, for example the custom titlebar implementation.\n    For more info see https://docs.microsoft.com/windows/apps/windows-app-sdk/use-windows-app-sdk-run-time#declare-os-compatibility-in-your-application-manifest --&gt;\n    &lt;supportedOS Id=\"{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}\" /&gt;\n  &lt;/application&gt;\n&lt;/compatibility&gt;\n</code></pre> <p>It should come shipped with any template of WinUI 3, including the Blank App one.</p> <p>See the Stack Overflow discussion  and confirmation from Microsoft employee  on Microsoft Learn for more information.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#setting-up-data-binding","title":"Setting up data binding","text":"<p>Unfortunately there is still no built-in observable type for MVVM development in WinUI 3. There are two popular ways for you to choose:</p> <ol> <li>Developing your own base observable type</li> <li>Use MVVM Toolkit  (recommended)</li> </ol> <p>We will introduce the first one in this tutorial. For the latter one, check out its documentation.</p> <p>First, create a base class:</p> ObservableBase.cs<pre><code>using System.ComponentModel;\nusing System.Runtime.CompilerServices;\n\nnamespace MyAwesomeApp.ViewModels;\n\npublic class ObservableBase : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler? PropertyChanged;\n\n    protected void NotifyPropertyChanged([CallerMemberName] string propertyName = \"\")\n        =&gt; PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n}\n</code></pre> <p>Then, create the class for view model:</p> MainWindowViewModel.cs<pre><code>public class MainWindowViewModel : ObservableBase\n{\n\n}\n</code></pre> <p>Then, for your view models, for every property, you will need a backing store for storing data and a property for triggering update events:</p> <pre><code>private string _versionString = string.Empty;\n\npublic string VersionString\n{\n    get =&gt; _versionString;\n    set { _versionString = value; NotifyPropertyChanged(); }\n}\n</code></pre> <p>For computed properties:</p> <pre><code>public int VersionStringLength =&gt; _versionString.Length;\n</code></pre> <p>When changing the backing store value, you should notify changes of all potentially affected properties:</p> <pre><code>private string _versionString = string.Empty;\n\npublic string VersionString\n{\n    get =&gt; _versionString;\n    set\n    {\n        _versionString = value;\n        NotifyPropertyChanged();\n        NotifyPropertyChanged(nameof(VersionStringLength));\n    }\n}\n\npublic int VersionStringLength =&gt; _versionString.Length;\n</code></pre> <p>Finally, in UI code, to bind to a value with <code>{x:Bind}</code>:</p> <ol> <li>Initialize view model object:     MainWindow.xaml.cs<pre><code>private MainWindowViewModel ViewModel { get; } = new();\n</code></pre></li> <li> <p>Bind to value in XAML:     MainWindow.xaml<pre><code>&lt;TextBlock Text=\"{x:Bind ViewModel.VersionString}\"/&gt;\n</code></pre></p> <p>Write properties properly!</p> <p>Do NOT write something like:</p> <pre><code>private MainWindowViewModel ViewModel =&gt; new();\n</code></pre> <p>As it\u2019s equivalent to:</p> <pre><code>private MainWindowViewModel ViewModel()\n{\n    return new MainWindowViewModel();\n}\n</code></pre> <p>And creates new instances for every bind request. Thus all changes are effectively discarded, and your memory is stuffed with instances of view models.</p> <p>Beware of bind mode difference from WPF</p> <p>The default bind mode for <code>{x:Bind}</code> in UWP and WinUI 3 is different from WPF, which uses <code>TwoWay</code> as the default value. <code>{x:Bind}</code> uses <code>OneTime</code> as default value for performance reasons. You need to bear this in mind when developing WinUI 3 applications.</p> <p>There are two ways to control this behavior:</p> <ol> <li>Explicitly specify bind mode:   <pre><code>&lt;TextBlock Text=\"{x:Bind ViewModel.VersionString, Mode=OneWay}\"/&gt;\n</code></pre></li> <li>Change default bind mode for the element and all children with <code>x:DefaultBindMode</code> attribute :   <pre><code>&lt;Window\n    x:DefaultBindMode=\"OneWay\"\n    x:Class=\"MyAwesomeApp.MainWindow\"\n    ...&gt;\n</code></pre></li> </ol> </li> </ol>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#setting-app-as-unpackaged","title":"Setting app as unpackaged","text":"<p>Sometimes you just want your app to run without being packaged. Plus, packaged apps require valid digital signatures to be installable on other devices, making it troublesome for private distribution. If you want your app to be unpackged, do the following steps:</p> <ol> <li>In your project file, add:     <pre><code>&lt;WindowsPackageType&gt;None&lt;/WindowsPackageType&gt;\n</code></pre></li> <li>On your IDE, select run target to <code>ProjectName (Unpackaged)</code>.</li> </ol> <p>And you should now be able to run and distribute your app just like the old days. By default your app does not ship the Windows App SDK version required for your app to run (meaning that users must have Windows App SDK installed on their systems to be able to run your app), you can add this line to your project file to include it with your app:</p> <pre><code>&lt;WindowsAppSDKSelfContained&gt;true&lt;/WindowsAppSDKSelfContained&gt;\n</code></pre>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#setup-for-navigational-app","title":"Setup for navigational app","text":"<p>If you wants your application to use the standard navigational design paradigm, you may need additional setups to get started. We do not use Dependency Injection in this tutorial, despite its elegance and benefit for future maintainability, as it may get too overwhelming for many readers.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#boilerplate-resources","title":"Boilerplate resources","text":"<p>By default, if you use a <code>NavigationView</code> control directly, you will see margins being incorrect and alignments being off. This is because somehow Microsoft still didn\u2019t manage to embed some required resources into the framework itself. So they decided that as a developer, it\u2019s your job to put those in your app. Here are some lines freshly ripped off the template project created with Template Studio:</p> <ol> <li>Create a folder in your project named <code>Styles</code>.</li> <li>In your <code>App.xaml</code>, add the highlighted lines:     App.xaml<pre><code>&lt;ResourceDictionary.MergedDictionaries&gt;\n    &lt;XamlControlsResources xmlns=\"using:Microsoft.UI.Xaml.Controls\" /&gt;\n    &lt;!-- Other merged dictionaries here --&gt;\n    &lt;ResourceDictionary Source=\"/Styles/FontSizes.xaml\" /&gt;\n    &lt;ResourceDictionary Source=\"/Styles/Thickness.xaml\" /&gt;\n    &lt;ResourceDictionary Source=\"/Styles/TextBlock.xaml\" /&gt;\n&lt;/ResourceDictionary.MergedDictionaries&gt;\n</code></pre></li> <li> <p>Create the style files:</p> <code>/Styles/FontSizes.xaml</code> <p>Serving <code>/Styles/TextBlock.xaml</code>, can be removed with it altogether.</p> <pre><code>&lt;ResourceDictionary\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"&gt;\n\n    &lt;x:Double x:Key=\"LargeFontSize\"&gt;24&lt;/x:Double&gt;\n    &lt;x:Double x:Key=\"MediumFontSize\"&gt;16&lt;/x:Double&gt;\n\n&lt;/ResourceDictionary&gt;\n</code></pre> <code>/Styles/Thickness.xaml</code> <pre><code>&lt;ResourceDictionary\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"&gt;\n\n    &lt;Thickness x:Key=\"LargeTopMargin\"&gt;0,36,0,0&lt;/Thickness&gt;\n    &lt;Thickness x:Key=\"LargeTopBottomMargin\"&gt;0,36,0,36&lt;/Thickness&gt;\n\n    &lt;Thickness x:Key=\"MediumTopMargin\"&gt;0,24,0,0&lt;/Thickness&gt;\n    &lt;Thickness x:Key=\"MediumTopBottomMargin\"&gt;0,24,0,24&lt;/Thickness&gt;\n    &lt;Thickness x:Key=\"MediumLeftRightMargin\"&gt;24,0,24,0&lt;/Thickness&gt;\n    &lt;Thickness x:Key=\"MediumBottomMargin\"&gt;0,0,0,24&lt;/Thickness&gt;\n\n    &lt;Thickness x:Key=\"SmallLeftMargin\"&gt;12,0,0,0&lt;/Thickness&gt;\n    &lt;Thickness x:Key=\"SmallLeftRightMargin\"&gt;12,0,12,0&lt;/Thickness&gt;\n    &lt;Thickness x:Key=\"SmallTopMargin\"&gt;0,12,0,0&lt;/Thickness&gt;\n    &lt;Thickness x:Key=\"SmallRightMargin\"&gt;0,0,12,0&lt;/Thickness&gt;\n    &lt;Thickness x:Key=\"SmallTopBottomMargin\"&gt;0,12,0,12&lt;/Thickness&gt;\n\n    &lt;Thickness x:Key=\"XSmallLeftMargin\"&gt;8,0,0,0&lt;/Thickness&gt;\n    &lt;Thickness x:Key=\"XSmallTopMargin\"&gt;0,8,0,0&lt;/Thickness&gt;\n    &lt;Thickness x:Key=\"XSmallLeftTopRightBottomMargin\"&gt;8,8,8,8&lt;/Thickness&gt;\n\n    &lt;Thickness x:Key=\"XXSmallTopMargin\"&gt;0,4,0,0&lt;/Thickness&gt;\n    &lt;Thickness x:Key=\"XXSmallLeftTopRightBottomMargin\"&gt;4,4,4,4&lt;/Thickness&gt;\n\n    &lt;Thickness x:Key=\"NavigationViewContentGridBorderThickness\"&gt;1,1,0,0&lt;/Thickness&gt;\n    &lt;CornerRadius x:Key=\"NavigationViewContentGridCornerRadius\"&gt;8,0,0,0&lt;/CornerRadius&gt;\n    &lt;Thickness x:Key=\"NavigationViewContentMargin\"&gt;0,48,0,0&lt;/Thickness&gt;\n    &lt;Thickness x:Key=\"NavigationViewHeaderMargin\"&gt;56,34,0,0&lt;/Thickness&gt;\n    &lt;Thickness x:Key=\"NavigationViewPageContentMargin\"&gt;56,24,56,0&lt;/Thickness&gt;\n\n    &lt;Thickness x:Key=\"MenuBarContentMargin\"&gt;36,24,36,0&lt;/Thickness&gt;\n\n    &lt;Thickness x:Key=\"SettingsPageHyperlinkButtonMargin\"&gt;-12,4,0,0&lt;/Thickness&gt;\n\n&lt;/ResourceDictionary&gt;\n</code></pre> <code>/Styles/TextBlock.xaml</code> <p>Additional pre-defined styles for <code>TextBlock</code> control, requires <code>/Styles/FontSizes.xaml</code>.</p> <pre><code>&lt;ResourceDictionary\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"&gt;\n\n    &lt;Style x:Key=\"PageTitleStyle\" TargetType=\"TextBlock\"&gt;\n        &lt;Setter Property=\"VerticalAlignment\" Value=\"Center\" /&gt;\n        &lt;Setter Property=\"FontWeight\" Value=\"SemiLight\" /&gt;\n        &lt;Setter Property=\"FontSize\" Value=\"{StaticResource LargeFontSize}\" /&gt;\n        &lt;Setter Property=\"TextTrimming\" Value=\"CharacterEllipsis\" /&gt;\n        &lt;Setter Property=\"TextWrapping\" Value=\"NoWrap\" /&gt;\n    &lt;/Style&gt;\n\n    &lt;Style x:Key=\"BodyTextStyle\" TargetType=\"TextBlock\"&gt;\n        &lt;Setter Property=\"FontWeight\" Value=\"Normal\" /&gt;\n        &lt;Setter Property=\"FontSize\" Value=\"{StaticResource MediumFontSize}\" /&gt;\n        &lt;Setter Property=\"TextTrimming\" Value=\"CharacterEllipsis\" /&gt;\n        &lt;Setter Property=\"TextWrapping\" Value=\"Wrap\" /&gt;\n    &lt;/Style&gt;\n\n&lt;/ResourceDictionary&gt;\n</code></pre> </li> </ol>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#main-window","title":"Main window","text":"<p>Remove everything in the <code>Window</code> node, making it something like this:</p> MainWindow.xaml<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;winuiex:WindowEx\n    x:Class=\"MyAwesomeApp.MainWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:MyAwesomeApp\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    xmlns:winuiex=\"using:WinUIEx\"\n    mc:Ignorable=\"d\"&gt;\n\n&lt;/winuiex:WindowEx&gt;\n</code></pre> <p>The goal is to have a visual tree like this:</p> <ul> <li>Root (Window / <code>DesktopWindowXamlSource</code>)<ul> <li>Root content grid (<code>Grid</code>)<ul> <li>Custom title bar (<code>Grid</code>)</li> <li>Navigation view (<code>NavigationView</code>)<ul> <li>Navigation items (<code>NavigationViewItem</code>)</li> <li>Content frame (<code>Frame</code>)<ul> <li>Actual page contents (<code>Page</code>)</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>To construct a scaffolding of this structure, let\u2019s go step by step:</p> <ol> <li>Add root content grid:     <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;winuiex:WindowEx\n    x:Class=\"MyAwesomeApp.MainWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:MyAwesomeApp\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    xmlns:winuiex=\"using:WinUIEx\"\n    mc:Ignorable=\"d\"&gt;\n    &lt;Grid&gt;\n        &lt;Grid.BackgroundTransition&gt;\n            &lt;!-- Add implicit background transition to seamlessly\n                 transition between light and dark mode --&gt;\n            &lt;BrushTransition/&gt;\n        &lt;/Grid.BackgroundTransition&gt;\n    &lt;/Grid&gt;\n&lt;/winuiex:WindowEx&gt;\n</code></pre></li> <li>Add customized title bar:     <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;winuiex:WindowEx\n    x:Class=\"MyAwesomeApp.MainWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:MyAwesomeApp\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    xmlns:winuiex=\"using:WinUIEx\"\n    mc:Ignorable=\"d\"&gt;\n    &lt;Grid&gt;\n        &lt;Grid.BackgroundTransition&gt;\n            &lt;!-- Add implicit background transition to seamlessly\n                 transition between light and dark mode --&gt;\n            &lt;BrushTransition/&gt;\n        &lt;/Grid.BackgroundTransition&gt;\n        &lt;Grid\n            x:Name=\"AppTitleBar\"\n            Canvas.ZIndex=\"1\"\n            Height=\"{x:Bind NavigationView.CompactPaneLength, Mode=OneWay}\"\n            IsHitTestVisible=\"True\"\n            VerticalAlignment=\"Top\"\n            Padding=\"0,0,140,0\"&gt;\n            &lt;!-- Give way to window controls\n                 (minimize / maximize / close) --&gt;\n            &lt;Image\n                Source=\"/Assets/Icon.ico\"\n                HorizontalAlignment=\"Left\"\n                VerticalAlignment=\"Center\"\n                Width=\"16\"\n                Height=\"16\"/&gt;\n            &lt;TextBlock\n                x:Name=\"AppTitleBarText\"\n                HorizontalAlignment=\"Left\"\n                VerticalAlignment=\"Center\"\n                TextWrapping=\"Wrap\"\n                MaxLines=\"2\"\n                Margin=\"28,0,0,0\"\n                TextTrimming=\"CharacterEllipsis\"\n                Style=\"{StaticResource CaptionTextBlockStyle}\"&gt;\n                My Awesome App\n            &lt;/TextBlock&gt;\n        &lt;/Grid&gt;\n    &lt;/Grid&gt;\n&lt;/winuiex:WindowEx&gt;\n</code></pre></li> <li>From code-behind, set custom title bar for the window in the constructor:     MainWindow.xaml.cs<pre><code>public MainWindow()\n{\n    InitializeComponent();\n\n    ExtendsContentIntoTitleBar = true;\n    SetTitleBar(AppTitleBar);\n}\n</code></pre></li> <li>Add navigation view:     <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;winuiex:WindowEx\n    x:Class=\"MyAwesomeApp.MainWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:MyAwesomeApp\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    xmlns:winuiex=\"using:WinUIEx\"\n    mc:Ignorable=\"d\"&gt;\n    &lt;Grid&gt;\n        &lt;Grid.BackgroundTransition&gt;\n            &lt;!-- Add implicit background transition to seamlessly\n                transition between light and dark mode --&gt;\n            &lt;BrushTransition/&gt;\n        &lt;/Grid.BackgroundTransition&gt;\n        &lt;Grid\n            x:Name=\"AppTitleBar\"\n            Canvas.ZIndex=\"1\"\n            Height=\"{x:Bind NavigationView.CompactPaneLength, Mode=OneWay}\"\n            IsHitTestVisible=\"True\"\n            VerticalAlignment=\"Top\"\n            Padding=\"0,0,140,0\"&gt;\n            &lt;!-- Give way to window controls\n                (minimize / maximize / close) --&gt;\n            &lt;Image\n                Source=\"/Assets/Icon.ico\"\n                HorizontalAlignment=\"Left\"\n                VerticalAlignment=\"Center\"\n                Width=\"16\"\n                Height=\"16\"/&gt;\n            &lt;TextBlock\n                x:Name=\"AppTitleBarText\"\n                HorizontalAlignment=\"Left\"\n                VerticalAlignment=\"Center\"\n                TextWrapping=\"Wrap\"\n                MaxLines=\"2\"\n                Margin=\"28,0,0,0\"\n                TextTrimming=\"CharacterEllipsis\"\n                Style=\"{StaticResource CaptionTextBlockStyle}\"&gt;\n                My Awesome App\n            &lt;/TextBlock&gt;\n        &lt;/Grid&gt;\n        &lt;NavigationView\n            x:Name=\"NavigationView\"\n            Canvas.ZIndex=\"0\"\n            OpenPaneLength=\"200\"\n            IsBackButtonVisible=\"Visible\"\n            IsBackEnabled=\"{x:Bind ContentFrame.CanGoBack, Mode=OneWay}\"\n            IsSettingsVisible=\"True\"\n            BackRequested=\"NavigationView_BackRequested\"\n            DisplayModeChanged=\"NavigationView_DisplayModeChanged\"\n            ItemInvoked=\"NavigationView_ItemInvoked\"\n            PointerPressed=\"NavigationView_PointerPressed\"\n            ProcessKeyboardAccelerators=\"NavigationView_ProcessKeyboardAccelerators\"&gt;\n            &lt;NavigationView.MenuItems&gt;\n                &lt;NavigationViewItem Icon=\"Home\" Tag=\"HomePage\" Content=\"Home\"/&gt;\n            &lt;/NavigationView.MenuItems&gt;\n            &lt;Frame\n                x:Name=\"ContentFrame\"\n                x:FieldModifier=\"Public\"\n                Navigated=\"ContentFrame_Navigated\"/&gt;\n        &lt;/NavigationView&gt;\n    &lt;/Grid&gt;\n&lt;/winuiex:WindowEx&gt;\n</code></pre>    By default we have one navigation item (Home), you can add more later on.</li> <li>Create Home page and Settings page:<ol> <li>Create a folder in your project named <code>Pages</code>.</li> <li>Right click <code>Pages</code>, add item type of <code>Blank Page (WinUI 3)</code>, name it as <code>HomePage</code>.</li> <li>Do the same above for <code>SettingsPage</code>, you will need the name to be exact to match the template code below.</li> </ol> </li> <li>Configure initial navigation in constructor:     <pre><code>public MainWindow()\n{\n    InitializeComponent();\n\n    ExtendsContentIntoTitleBar = true;\n    SetTitleBar(AppTitleBar);\n\n    NavigationView.SelectedItem = NavigationView.MenuItems.First();\n    ContentFrame.Navigate(typeof(HomePage));\n}\n</code></pre></li> <li>Wire up events (remember to import <code>MyAwesomeApp.Pages</code> namespace!):     <pre><code>private void NavigationView_BackRequested(NavigationView sender, NavigationViewBackRequestedEventArgs args)\n{\n    if (ContentFrame.CanGoBack)\n        ContentFrame.GoBack();\n}\n\nprivate void NavigationView_DisplayModeChanged(NavigationView sender, NavigationViewDisplayModeChangedEventArgs args)\n{\n    // Adapt to layout changes as the burger menu now lives on the title bar\n    AppTitleBar.Margin = new Thickness()\n    {\n        Left = sender.CompactPaneLength * (sender.DisplayMode == NavigationViewDisplayMode.Minimal ? 2 : 1),\n        Top = AppTitleBar.Margin.Top,\n        Right = AppTitleBar.Margin.Right,\n        Bottom = AppTitleBar.Margin.Bottom\n    };\n}\n\nprivate void NavigationView_ItemInvoked(NavigationView sender, NavigationViewItemInvokedEventArgs args)\n{\n    // Special detection for Settings page\n    if (args.IsSettingsInvoked &amp;&amp; ContentFrame.SourcePageType.Name == \"SettingsPage\") return;\n    else if (ContentFrame.SourcePageType.Name == ((NavigationViewItem)args.InvokedItemContainer).Tag.ToString()) return;\n\n    Type? targetType;\n    if (args.IsSettingsInvoked)\n        targetType = typeof(SettingsPage);\n    else\n        targetType = (args.InvokedItemContainer as NavigationViewItem)?.Tag switch\n        {\n            // Add references to pages here if you have added more pages in the future\n            nameof(HomePage) =&gt; typeof(HomePage),\n            _ =&gt; null\n        };\n\n    if (targetType is not null)\n        ContentFrame.Navigate(targetType, null, args.RecommendedNavigationTransitionInfo);\n}\n\nprivate void ContentFrame_Navigated(object sender, NavigationEventArgs e)\n{\n    // Automatically decide which navigation item should be selected\n    if (e.SourcePageType == typeof(SettingsPage))\n        NavigationView.SelectedItem = NavigationView.SettingsItem;\n    else if (ContentFrame.SourcePageType != null)\n    {\n        var targetItem = NavigationView.MenuItems\n            .OfType&lt;NavigationViewItem&gt;()\n            .FirstOrDefault(i =&gt; i.Tag.Equals(ContentFrame.SourcePageType.Name));\n        if (targetItem is not null)\n            NavigationView.SelectedItem = targetItem;\n    }\n}\n\n// Handle keyboard return shortcuts\nprivate void NavigationView_ProcessKeyboardAccelerators(UIElement sender, ProcessKeyboardAcceleratorEventArgs args)\n{\n    if (args.Modifiers == VirtualKeyModifiers.Menu &amp;&amp; args.Key == VirtualKey.Left ||\n        args.Key == VirtualKey.GoBack ||\n        args.Key == VirtualKey.XButton1)\n    {\n        if (ContentFrame.CanGoBack)\n        {\n            ContentFrame.GoBack();\n            args.Handled = true;\n        }    \n    }\n}\n\n// Handle mouse back button\nprivate void NavigationView_PointerPressed(object sender, PointerRoutedEventArgs e)\n{\n    if (e.GetCurrentPoint(NavigationView).Properties.IsXButton1Pressed &amp;&amp; ContentFrame.CanGoBack)\n    {\n        ContentFrame.GoBack();\n        e.Handled = true;\n    }\n}\n</code></pre></li> </ol> <p>Congratulations! You should now have a working navigational app that looked like this:</p> <p></p> <p>You can also save your project now as a template for all future projects.</p>"},{"location":"2024/05/05/the-state-of-the-windows-app-sdk/#onwards","title":"Onwards!","text":"<p>Now that your project is set up, you can carry on with your normal development procedure.</p> <p>So to answer the question: what\u2019s the state of the Windows App SDK? I\u2019ll probably say: it\u2019s usable, but still flawed, with many easily fixable bugs overdue for a long time. Every project needs tons of setup work, fixes and hacks by developers, and can cause further problems in the future.</p> <p>Be sure to regularly check for release notes of the Windows App SDK to see if your hacks for some problems are finally fixed and can be removed. Chances are that Microsoft may not even dare to fix those problems when they finally have the time to do so, as fixes may break the workarounds, causing new problems by fixing old problems.</p> <p>This is the commitment issue. Despite the great concepts, Microsoft showed little commitment on this project, and had assigned very few resources for it. Think twice before you make this investment, as the future of the Windows App SDK is very much unclear, and your hard work could be in tatters in no time. Stick to older frameworks like Windows Forms and WPF if you are hesitant making the move. Microsoft\u2019s track record has clearly shown that they may torch this or that, they never had the bravery of torching those old working horses. Thus while you may not have access to the latest and greatest features, at least you are not at the risk of suddenly losing all investments, if you\u2019re not making any investment at all.</p> <ol> <li> <p>Some may require your app to be packaged (to have a Package Identity ) to work.\u00a0\u21a9</p> </li> <li> <p>Acrylic and Mica material support was added in a later release.\u00a0\u21a9</p> </li> <li> <p>Maybe everyone knew that even if your application is compiled into native binary, its performance is still nowhere near those written in C++ as there are still overheads from the framework and runtime. However this is not true in all scenarios. Take sorting algorithms for example, a badly written algorithm in C++ may perform way worse than .NET\u2019s built-in, highly optimized <code>IEnumerable.Sort()</code> algorithm implementation, let alone the binary version compiled with .NET Native. I am fully aware of the fact that STL has a built-in, highly optimized sorting algorithm as well, but this is not the point of this discussion.\u00a0\u21a9</p> </li> <li> <p>Can be any arbitrary path, but <code>Assets</code> is the standard and recommended name.\u00a0\u21a9</p> </li> </ol>"},{"location":"2024/01/29/a-rant-about-the-consistency-of-windows/","title":"A Rant About The Consistency of Windows","text":"<p>Born on November 10, 1983, Windows, at the time still based on MS-DOS, finally introduces the graphical user interface (GUI) to people using IBM PC (or its clones).</p> <p>Follow the path of history, as we shed some light onto one of the greatest weaknesses in terms of user experience of Windows - historical relics and inconsistency.</p> <p>It\u2019s been 40 years since Windows was first introduced, and even longer for MS-DOS, which was introduced 2 years prior to Windows. Over almost half a century, Windows has evolved through many iterations. Its kernel, for example, has evolved from MS-DOS, to MS-DOS-based, to NT. Till now, the latest version of Windows is Windows 11. There is certainly no denying that every single modern operating system, including Windows, is a feat of engineering. But shiny as it is, Windows is a piece of software that is way too big. And history relics have found their way to today, some hiding in the corners, some visible everyday, most remain untouched for years. This creates a feel of inconsistency, making Windows messy and segmented, sharply visible in user interface.</p>"},{"location":"2024/01/29/a-rant-about-the-consistency-of-windows/#simpler-times","title":"Simpler times","text":"<p>Microsoft has a very terrible track record of maintaining stuff. From Silverlight to Zune, from Metro apps to UWP, some of which are confirmed D-E-A-D dead, while some are de-facto dead. This has always been a problem troubling Microsoft, despite it being still pretty manageable in the XP era. Back then, for native application development, Microsoft offered developers a simple option:  Win32 MFC with C or C++. While developing Windows XP, Microsoft was also working on something called \u201c.NET Framework\u201d, formerly \u201cNext Generation Windows Services\u201d - a revolutionary framework that was set to make native application development way easier, safer, more efficient and reliable than ever before.</p> <p>.NET Framework was a great idea, with C#, one the bundled languages, it introduced a  generational garbage collection automatic memory management mechanism to developers familiar with C and C++ syntaxes, freeing them from the hassle of error-prone manual memory management. It\u2019s like driving manual vs. automatic transmission cars. Sure, if you are skilled enough, manual could be better than automatic for 85% of the time, but for everyone else automatic is (way) better than manual for 99% of the time. Even better, as a brand new language with a brand new framework, Microsoft took their time to painstakingly wrap traditional C++ Win32 APIs into their brand new form in .NET Framework. Gone are the ugly <code>typedef</code>s like <code>LPCTWSTR</code> or obsolete ones like <code>DWORD</code>, say hello to the new, unified keywords like <code>string</code> and <code>int</code>. There is no need to listen for  Windows Messages, just use events and their respective handlers. You don\u2019t even need to write a main loop, the framework also does that for you, and events are automatically delivered to your application, rather than you having to actively retrieve it first. Things are looking great so far. Everything looks promising, and when it was released in February 13, 2002, developers are quickly adopting to this new piece of technology, in hope to improve their workflow and make future development easier and faster.</p> <p>The initial framework in .NET Framework for graphical user interfaces is Windows Forms. In a nutshell, it is a wrapper of Win32 APIs used to create native applications with native Windows controls and widgets. So things made with Windows Forms will look and behave just the same as if they\u2019ve been written with Win32 APIs. Who doesn\u2019t like it when you have more than one technical choices to achieve the same thing? As time went on, .NET Framework gained popularity among developers for its ease of use and overall better experience than C++ Win32 development. It seemed like Microsoft finally made a worthy, modern candidate to challenge the almighty Win32\u2019s reign.</p>"},{"location":"2024/01/29/a-rant-about-the-consistency-of-windows/#enter-wpf","title":"Enter WPF","text":"<p>But unfortunately, at this point, Microsoft was already a very bureaucratic corporation. Somewhere in a small office in Redmond, WA<sup>2</sup>, someone suggested that Windows Forms is just not revolutionary enough. Think about it, it was just a wrapper for the existing Win32 APIs that it was set to replace in the first place. How could you replace something when you still depend on it?</p> <p>The team came up with something codenamed \u201cAvalon\u201d, and planned to make some aggressive and radical technological advancements under the hood. First, UI composition will be accelerated by GPU with DirectX. Then, inspired by the web, the UI is now defined by XAML, instead of drag-and-drop in IDE<sup>3</sup> or bunches of repetitive <code>new()</code> and <code>Controls.Add()</code> calls. Proper high-DPI display support became a reality, and dynamic data binding is now the recommended standard approach. Its name is later revealed as \u201cWindows Presentation Foundation\u201d, or WPF for short. WPF was officially released in November 21, 2006, 4 years after Windows Forms. In a technological sense, WPF is a huge leap over Windows Forms. It is no longer just a wrapper for Win32 APIs, but a brand new framework with brand new architecture.</p> <p>However, as WPF no longer depends on the Win32 API set used by Windows Forms to composite UI, it needs to implement its own composition mechanism. Like any other WPF component, the rendering engine is built from the ground-up, requiring WPF itself to render controls mimicking the style and behavior of native Windows controls, as if they\u2019ve been drawn with Win32 APIs. Despite all the hard work put into it, to users, it is still a simulation, and still gives out an odd feeling that something\u2019s off. This is strike one in user interface inconsistency. On the bright side, though, WPF did a fantastic job of recreating the original Windows feel. In addition to the XP-style \u201cLuna\u201d theme, WPF also added Aero (Windows Vista and 7) and Metro (Windows 8 and 8.1) theme later, and will automatically try to use the best match for current version of Windows. In fact, if you feel nostalgic, you can even instruct WPF to render in Luna theme on Windows 11.</p> List of built-in themes of WPF <p>WPF has become open-source since late 2018, which made it easier for us to peek at its inside. A complete list of built-in themes of WPF could be found easily at its  GitHub repository.</p> <p>As of writing, there are 8 built-in themes available:</p> Assembly XAML Theme <code>PresentationFramework.Classic</code> <code>Classic.xaml</code> Windows Classic theme <code>PresentationFramework.Luna</code> <code>Luna.NormalColor.xaml</code> Classic blue Luna theme <code>PresentationFramework.Luna</code> <code>Luna.Metallic.xaml</code> Silver Luna theme <code>PresentationFramework.Luna</code> <code>Luna.HomeStead.xaml</code> Olive Luna theme <code>PresentationFramework.Royale</code> <code>Royale.NormalColor.xaml</code> Luna theme on Windows XP Media Center Edition <code>PresentationFramework.Aero</code> <code>Aero.NormalColor.xaml</code> Aero theme on Windows Vista &amp; 7 <code>PresentationFramework.Aero2</code> <code>Aero2.NormalColor.xaml</code> Aero theme on Windows 8 &amp; 8.1 <code>PresentationFramework.AeroLite</code> <code>AeroLite.NormalColor.xaml</code> Aero theme on Windows 10 <p>You can also see the archived MSDN blog  (now on Microsoft Learn) for reference.</p> Applying styles to your own application <p>To use one of the built-in styles, Olive Luna, for example, make sure your <code>App.xaml</code> looked like this:</p> <pre><code>&lt;Application ...&gt;\n    &lt;Application.Resources&gt;\n        &lt;ResourceDictionary&gt;\n            &lt;ResourceDictionary.MergedDictionaries&gt;\n                &lt;ResourceDictionary Source=\"/PresentationFramework.Luna,Version=0.0.0.0,PublicKeyToken=31bf3856ad364e35;component/Themes/Luna.HomeStead.xaml\" /&gt;\n            &lt;/ResourceDictionary.MergedDictionaries&gt;\n        &lt;/ResourceDictionary&gt;\n    &lt;/Application.Resources&gt;\n&lt;/Application&gt;\n</code></pre> <p>If you do not wish to apply it globally, you can apply it to specific windows as well. Just move the innermost part to the <code>&lt;Window.Resources&gt;</code> part and et voil\u00e0!</p>"},{"location":"2024/01/29/a-rant-about-the-consistency-of-windows/#ipad-and-metro","title":"iPad and Metro","text":"<p>The iPad, released in April 2010, was set to fill the gap between smartphones and computers. It\u2019s categorized as a \u201ctablet computer\u201d, and was a hit, which posed a significant threat to Microsoft and apparently caught them off guard. As part of Microsoft\u2019s \u201cstrengthen the monopoly by making Windows run everywhere\u201d plan, Microsoft decided that they better enter the tablet computer market as well. Coincidentally, as the other company in the Wintel alliance, Intel was also looking for a way to fight against the rise of smartphones and tablet computers. Neither of the two companies wanted the \u201clifestyle company in Cupertino\u201d<sup>4</sup> to eat away their precious market share. So once again, the two giants sat down together to discuss about the future of Windows and PCs.</p>"},{"location":"2024/01/29/a-rant-about-the-consistency-of-windows/#microsofts-view","title":"Microsoft\u2019s view","text":"<p>On Microsoft\u2019s side, to make Windows run (well) on tablet computers, would obviously require a touch-first, or at least touch-friendly user interface, along with other major overhauls under the hood to make Windows \u201cmobile\u201d enough to compete with the iPad and others. But Microsoft seemed confident.</p> <p>Windows PCs will continue to adapt and evolve, and Windows will be everywhere on every kind of device without compromise.</p> <p>\u2014 Steve Ballmer, former CEO of Microsoft<sup>5</sup></p> <p>Nice one, Steve. For readers, please remember the \u201cwithout compromise\u201d statement, or you may miss some good laughs. As part of their plan, the next generation of Windows would feature:</p> <ul> <li>A new, touch-friendly UI</li> <li>An app ecosystem like the App Store</li> <li>Full UEFI boot support</li> <li>The ability to run on ARM-based systems</li> <li>Quick wake, sleep, boot up and shut down speed</li> </ul> <p>... and everything else to make Windows competitive enough against iPads running iOS.</p> <p>Microsoft also proposed something called \u201c Connected Standby\u201d, a feature allowing Windows devices to stay always connected to Wi-Fi networks to continuously receive messages and updates like tablet computers running iOS and Android, and have comparable responsiveness of them when going to sleep and waking up. It was a good concept, but was implemented so horribly that it will later be proven more as a trouble rather than convenience in the years to come<sup>6</sup>.</p>"},{"location":"2024/01/29/a-rant-about-the-consistency-of-windows/#intels-view","title":"Intel\u2019s view","text":"<p>Meanwhile, on Intel\u2019s side, some of the features proposed by Microsoft must be implemented by Intel to become a reality. And Intel also needs to figure out their stuff to enable x86 systems to fit in the form of a tablet computer. Here are some major differences between desktop and laptop PCs and tablet computers in terms of hardware:</p> Feature PCs Tablet computers  Input Mouse &amp; keyboard Multi-touch  Thermal management Active Passive  Storage media Mainly spinning Solid-state  Connectivity Mainly wired Wireless  Level of integration Low High  Power model On &amp; off Wake &amp; sleep, always on  Power budget High Low (smaller batteries) <p>To make x86 platform suitable for mobile computing on tablet computers, Intel\u2019s job is far more complicated than simply putting new low-TDP Atom or Celeron CPUs onto the market. In order to fit in the limited space of tablet computers, they need to provide high level of integration by making not just CPUs, but SoCs (System on a Chip), combining functionalities previously enabled by chips on motherboard like audio into the processor. Intel also needs to renovate their platform to fit Microsoft\u2019s needs, particularly when it comes to Connected Standby.</p>"},{"location":"2024/01/29/a-rant-about-the-consistency-of-windows/#windows-8","title":"Windows 8","text":"<p>In October 2012<sup>7</sup>, a disaster called Windows 8 was released. To end users, the most obvious change is of course the design. When Windows 8 is first booted, the user is greeted with the OOBE (Out-of-box experience) screen featuring the new, minimalist flat design called \u201cMetro\u201d<sup>8</sup>. If your graphics drivers are up and ready, the elegant, smooth animations and bold new colors will definitely give you a refreshing feel. Then you\u2019re greeted with the brand new, full-screen Start Menu, maybe leaving you confused: where is my desktop? After spotting a rectangular tile called \u201cDesktop\u201d mixed in other rectangles, and a firm mouse click, congratulations, you have finally found your way to the familiar Windows desktop you know and love<sup>9</sup>. Home sweet home, the recycle bin, the desktop wallpaper and the taskbar, they are all there, refreshed yet still with the spirit of Windows, and the Start But \u2014 wait, hold up, where has the Start Button gone?</p> <p>Great, now you have it. It\u2019s not a bug, it\u2019s a feature.\u2122 The Start Button is officially gone. In Microsoft\u2019s defense, you can still open Start Menu with the Start key on your keyboard, or the physical Start button on your tablet, or in the Charms menu. You can also move your mouse cursor to the bottom left corner of the screen, revealing the Start Button.</p> <p>Oh, and the Charms menu, one of the \u201ccorner/edge actions\u201d, which features five submenus: Search, Share, Start (colored in current accent color), Devices, Settings, is a core design of Windows 8. As part of Windows 8\u2019s touch-optimized design paradigm, gestures are important. For touch input, swiping left from the right edge brings up the Charms menu, swiping right from the left edge cycles through recently opened Metro apps and the Desktop, and swiping down from the top edge closes current app (including Desktop)<sup>10</sup>. For mouse and keyboard input, move your mouse cursor to the two corners on the right side of the display, and then vertically to bring up the Charms menu. Move it to the two corners on the left side of the display and then vertically to bring up the recently opened Metro apps list. Clicking the top-left corner will cycle through recently opened Metro apps and the Desktop. Oh, you can also bring up the Charms menu by pressing Win+C key combo.</p> <p>It\u2019s already getting very boring and complicated. You thought to your self: \u201cok, I\u2019ve had enough\u201d. When you try to shut it down, if you\u2019re on a tablet, then great, just hold the power button and swipe down when the meticulously crafted \u201cSlide to shut down your PC\u201d screen shows up. However, if you are unfortunately on a desktop or laptop, you may discover yet another surprise: \u201chow the heck am I gonna shut this thing down\u201d as there\u2019s no freaking power button or menu on the Start Menu? Then you start searching for \u201chow to shut down Windows 8\u201d, as you find hundreds of thousands of confused users, just like you, asking the same question of how to turn off a computer, with Windows 8 installed. Turns out it\u2019s buried so deeply into the Charms menu that pressing Alt+F4 on the desktop and selecting Shut down, or even pressing Win+R and then typing <code>shutdown /s /t 0</code> is faster than using Charms menu to turn off the computer. To turn off your computer, open Charms menu however you like, then click or tap \u201cSettings\u201d, then \u201cPower\u201d, then \u201cShut down\u201d. It was so bad that Microsoft quickly released Windows 8.1 exactly a year later in an attempt to fix the hate it received. Windows 8.1 brought back the Start Button, made it possible to enter the desktop once logged in, and added a power button on the Start Menu, among other fixes and touchups.</p>"},{"location":"2024/01/29/a-rant-about-the-consistency-of-windows/#metro-apps","title":"Metro apps","text":"<p>I kept mentioning Metro apps, but did you really know what they are? They are also known as \u201cWindows Store apps\u201d, built on the new framework called \u201cWindows Runtime\u201d or WinRT (not to be confused with Windows RT, which we will discuss about later). Contrary to its name, it is not a runtime, but a new set of APIs for a new kind of applications that is Metro apps, they are mostly packaged, run in a sandbox, published to and acquired from Microsoft Store (formerly Windows Store), and require permissions and user approvals to use specific functionalities, kind of like on mobile operating systems such as Android and iOS. You can see it as Microsoft\u2019s attempt to bring Android &amp; iOS-style apps to Windows. They all run full-screen, are touch-first, and share the Microsoft Design Language, which is Microsoft\u2019s official name for the widely known Metro style.</p> <p>There you go, after traditional Windows APIs and WPF, here comes the third kind of applications on Windows. The good thing, and also a problem is that they all run on Windows 8. Counting the classic Windows style and the Ribbon UI introduced with Office 2007, Microsoft has already got at least 5 styles of user interfaces and 3 frameworks, scattered across the operating system.</p> <p>Fortunately, as WPF made so many radical advancements at its time, many of its concepts still carry their legacy till the Windows 8 era. Metro \u2014 I\u2019ve got tired of this. To make it clear, one of the UI frameworks that came with Windows Runtime is called \u201cWindows UI Library\u201d, or WinUI for short. It\u2019s used to create applications with the Microsoft Design Language. I drew the following diagram in an attempt to make things easier to understand.</p> <p></p> <p>And don\u2019t forget that all 3 of them have their respective style of UI:</p> <ul> <li>the latest &amp; greatest Microsoft Design Language</li> <li>mimicked look of Win32 by WPF</li> <li>classic<sup>(authentic!)</sup> Win32 look</li> </ul> <p>The troubling thing is that they all run on Windows 8, with a majority of applications still on WPF or Win32, running on the desktop, and only MDL is touch-optimized by default. Just ask anyone who have used a Windows tablet before about the experience of touching those teeny tiny little buttons and controls designed for precision cursor input. I bet you\u2019ll get negative feedback more often than less. The interfaces that most people interact with daily just simply don\u2019t play well with touch.</p> <p>As for laptops with a touchscreen, things aren\u2019t getting anywhere better, either. In addition to user interfaces that poorly fit touch input, the touch surface is often vertical and far from user\u2019s normal reach. There\u2019s a famous quote from Jobs:</p> <p>Touch surfaces don\u2019t want to be vertical. It gives great demo. But after a short period of time, you start to fatigue. After an extended period of time, your arm wants to fall off. It doesn\u2019t work. It\u2019s ergonomically terrible. Touch surfaces want to be horizontal.</p> <p>\u2014 Steve Jobs, founder and former CEO of Apple<sup>11</sup></p>"},{"location":"2024/01/29/a-rant-about-the-consistency-of-windows/#windows-rt","title":"Windows RT","text":"<p>Laptops aside, another goal of Windows 8 is to have Windows running on tablet computers, sometimes with ARM processors, just like those it\u2019s trying to compete against. Microsoft decided to launch a special version of Windows 8 dedicated to serve this purpose, which was later revealed as \u201cWindows RT\u201d. Windows RT runs on 32-bit ARMv7 systems. But being on a wholly new hardware architecture, none of the existing applications designed and compiled for x86 processors could run on it. Microsoft has always prioritized compatibility, but this time seems like not the case. As Windows RT strictly limits app choices for users to:</p> <ul> <li>Pre-loaded Windows desktop software</li> <li>Pre-loaded WinRT apps</li> <li>Windows Store apps<sup>12</sup></li> </ul> <p>All of a sudden, all third-party Win32 desktop applications were gone. WinRT became the only viable target for developers trying to develop software for the platform that is Windows RT. Still, could be worse, as Microsoft\u2019s own, flagship development tool, the Visual Studio, has absolutely ZERO support for this new platform. To make something for Windows RT, you still need a x86-based Windows PC, install Visual Studio there, do your development, and then deploy to the Windows RT device for testing. It was a huge freaking pain in the arse. Not to mention the situation that WinRT is still broken, as it just plainly lacks the functionalities otherwise available on Win32: there\u2019s no access to the registry (which itself is a mountain of shite and crap), background activities are significantly limited to almost none, filesystem access is tightly restricted, etc.</p> <p>Mind you, while WinRT is broken, it still has several features that are not available to Win32 applications: new touch-optimized MDL UI, notifications API, Windows settings sync integration, easy acquisition via Windows Store, one-click installation &amp; uninstallation, etc. So, in other words, Win32 applications just plainly lacks the functionalities otherwise available on WinRT, so Win32 is bro...ken? I suppose? There is just no way to have the best of both worlds, and developers are getting increasingly frustrated. As the market for Windows RT is just beginning and is way too small, most developers chose the easy way out: just don\u2019t invest in it and give it up. Yet the move from developers further restricted what users could do with Windows RT devices. It\u2019s a death loop, a chicken-or-the-egg situation. In the end, for most developers and users who have actually tried to used a Windows RT, this is how they often feel like:</p> <p></p> <p>The sales numbers clearly, and accurately represented this trainwreck. With poor sales and a $900 million loss, Microsoft only launched two Windows RT devices: the Surface (also known as Surface with Windows RT or Surface RT) and Surface 2. Later when it comes to the number<sup>(3)</sup> that Gabe Newell allegedly cannot spell, only the Surface Pro stayed, and the numeric edition of Surface is nowhere to be found.</p>"},{"location":"2024/01/29/a-rant-about-the-consistency-of-windows/#universal-windows","title":"Universal Windows","text":"<p>Microsoft\u2019s dream of conquering personal computing with Windows did not simply end with the demise of Windows RT. They still want Windows to run on everything, everywhere. With the release of \"The Last Version of Windows\"<sup>13</sup>, namely Windows 10 in 2015, Microsoft fixed many mistakes and reverted many aggressive changes in Windows 8 and 8.1. Plus, two visual updates. First is for the Win32-based applications (a long-observed tradition as Microsoft typically gives them a refresh on major updates). Then, the Microsoft Design Language has officially evolved to MDL2. And good news! You can finally have your WinUI applications windowed instead of full-screen! Despite all the changes, Microsoft actually did not fully remove the Windows 8 legacy from Windows 10. In fact, if you install and open a WinRT app built for Windows 8, a minified Charms menu will appear in the title bar, exposing the features, and flyouts will pop out from the right edge of the app window when you click the corresponding menu items. Compatibility, huh? Heck, Microsoft even kept the Windows 8-style Networks flyout in Windows 10<sup>14</sup>.</p> <p>For the first time, Microsoft did a significant bump of Windows 10\u2019s NT kernel version from <code>6.3</code> in Windows 8 to <code>10.0</code> in Windows 10<sup>15</sup>. And with Windows Phone, Xbox, and later HoloLens, there are 4 versions of Windows 10: Windows 10 Desktop, Windows 10 Mobile, Windows 10 Xbox, and Windows 10 HoloLens, each with their unique features and limitations. It\u2019s now Nadella time<sup>16</sup>, and maybe still vaguely remembering Ballmer\u2019s  Developers song, Microsoft decided to make developers\u2019 lives a bit easier by putting out a unified platform based on WinRT, called Universal Windows Platform, or UWP for short. And the MDL2 design is now integrated with WinUI 2.</p> <p>With UWP, aside from the shiny new design, developers can expect to build once on their development machines, and their apps will run on all four editions of Windows 10. Plus a series of practical improvements like .NET Native, <code>{x:Bind}</code> support, light and dark mode support, system materials, <code>{ThemeResource}</code> namespace and many useful control improvements, including the new, long-awaited <code>Spacing</code> property for panel controls supporting automatic layouts. But many of those limits are still there, thus despite these advancements, UWP still cannot replace those creaking ancient Win32 applications in the forseeable future.</p> <p>To make matters worse, it looks like Microsoft themselves are not into UWP, which is their own work, either. There is still a pile of Windows components with most of their UIs untouched since the Windows 9x days. Just press Win+R for yourself. See how much it\u2019s changed since Windows 98.</p> <p></p> <p></p> <p>Nice job Microsoft, you multi-trillion-dollar corporation. I cannot wait to see if you guys can make any changes to it before either you or I am dead in the coffin.</p>"},{"location":"2024/01/29/a-rant-about-the-consistency-of-windows/#the-rise-of-the-web","title":"The rise of the web","text":"<p>Meanwhile, the web is watching. In all the years of Microsoft\u2019s disasters after disasters, web technologies are rapidly evolving. Smartphones and tablets, exactly what Microsoft\u2019s been fighting against all the time \u2014 are quickly becoming the first platform for newcomers to the Internet. People need to get their stuff done while on the go, mobile data is becoming cheaper, faster and more reliable, and smartphones and tablets are becoming increasingly powerful.</p> <p>In July of 2013, one month away from Windows 8.1\u2019s release, GitHub launched an open-source framework called \u201cElectron\u201d. Its concept is to use web technologies (like the HTML, CSS and JavaScript trio) to create desktop applications. Later in February 2014, based on the Electron framework, the Atom editor was released \u2014 a full-fledged, desktop-grade application, just as if it\u2019s native.</p> <p>It\u2019s official: the web no longer just lives on your browser, it lives right on your desktop now.</p> <p>The bad news for Microsoft is that there are operating systems other than Microsoft Windows, and browsers other than Internet Explorer, and they run on those systems as well.</p> <p>For Microsoft, they may control Windows, but they do not control the web.</p> <p>Based on the Chromium browser, Electron is a milestone. Since Chromium runs on all three major desktop platforms: Linux, macOS (at the time still called OS X), and of course Microsoft Windows, apps built with Electron automatically run on all those platforms, except from time to time there may be some tweaking required. Thus Atom also runs on all three platforms, with an universal codebase, along some platform-specific changes. This is also great news for developers, as they no longer have to develop three apps for three platforms individually.</p> <p>Chromium is the open-source browser that powers Chrome, which slaughtered Internet Explorer, significantly crippling Microsoft\u2019s monopolistic empire. Now it is thirsty for blood, looking to cripple the tilted empire once more.</p> <p>As Chromium continued to develop and web technologies became more and more sophisticated, a lot of problems in the early days of the web were solved, making Electron-based apps and similar closer to native step by step. Spellcheckers? 3D graphics? Offline functionalities? Even things WinRT apps could not do, like accessing the Windows registry and devices? Yes, yes, yes and yes. Turns out the Electron community supports their developers way better than bureaucratic Microsoft does. With JavaScript techniques and browser engines advancing day by day, and Microsoft stuck in their scattered history of frameworks after frameworks, the number of developers who jumped ships to embrace the web increased again and again. In the end, what\u2019s more satisfying than having your one project run on multiple platforms seamlessly with minimal effort?</p> <p>The ironic thing is that it is so good that even Microsoft themselves recognized the value of it. Multiple Microsoft applications had since then been built with web technologies. Even Visual Studio 2016 has several node.js backends running in its process tree. Later in early 2019, Microsoft replaced the old (yet still looked modern), native Visual Studio Installer with a \u2014 you guessed it, an Electron-based Visual Studio Installer. The installer you downloaded from Microsoft is a very small WPF program to install the Electron-based Visual Studio Installer. Yes, you heard that right. You\u2019ve actually downloaded a native installer to install the Electron-based Visual Studio Installer, the Visual Studio Installer-Installer. It wouldn\u2019t be until 2021 that Microsoft finally replaced it with a native one based on WPF. If you need some laughs, see this hilarious feedback  where due to a bug in Electron, even when performing offline setup, the Visual Studio Installer wouldn\u2019t even start without a network connection in certain environments.</p> <p>Till Windows 11, Microsoft\u2019s latest installment of this shite-show, their policy had usually been \u201cquickly put out a web-based version of something before thinking about a way to implement it (properly) somehow in WPF or something else some time later\u201d, like the integrated so-called \u201cWidgets\u201d ad-n-crap pop-up in Windows 11. Oh and the preinstalled crap called Teams! I absolutely love Teams! I love it so much that I\u2019ve uninstalled it from countless Windows 11 PCs for countless times and shall continue doing so in the forseeable future so long as Microsoft and its management still decides to put unneeded crap and advertisements into their \u201cservice\u201d that is called Windows.</p>"},{"location":"2024/01/29/a-rant-about-the-consistency-of-windows/#project-reunion","title":"Project Reunion","text":"<p>Remember the holy trinity of frameworks and design systems used to develop applications for Windows? You have classic, WPF and WinRT, now there are UWP (technically a successor of WinRT) and web-based applications with Electron (or similar frameworks) as well. It\u2019s made Windows a five-point star that may stab any developer not careful enough when handling. Surprisingly, Microsoft did actually try to do something to fix this chaotic situation. They named it \u201cProject Reunion\u201d, with the goal of unifying the various frameworks for creating Windows applications.</p> <p>The current situation is that for developers using Win32 APIs, when they want to use the modern Windows UI with MDL, they can\u2019t, as they\u2019re exclusive to WinRT apps. While for those who are developing WinRT apps, when they want to use the Win32 APIs otherwise unavailable in WinRT, they can\u2019t, either. For whatever technology you choose, you will almost definitely be crippled at some points.</p> <p>To do something about this, Project Reunion is designed with the following goals in mind:</p> <ul> <li>Allow apps to access both Win32 and WinRT APIs</li> <li>Bring modern XAML-based UI design and resource management to Win32 apps</li> <li>Make Win32 apps packageable with an identity with MSIX</li> <li>Enable existing Win32 apps to use WinRT APIs with minimal changes</li> <li>Follow Windows\u2019s latest design language (Fluent Design)</li> </ul> <p>At the end of the day, Project Reunion is more like giving traditional Win32 apps a way to access the modern WinRT system previously exclusive to WinRT apps only. To developers, this is more or less an announcement of backstabbing, a sign of a slow step of UWP towards its grave. But on the bright side:</p> <ul> <li>There are many(!) more apps in Win32 than UWP</li> <li>Most APIs in Project Reunion are the same as or highly similar to UWP</li> <li>Most XAML designs in UWP can be reused</li> </ul> <p>While some porting efforts will be required for everyone, Microsoft\u2019s model kept everyone\u2019s work to minimal, yet maintained the platform\u2019s move in the right direction. Everything is looking great, except with Nadella behind the rudder, at this time, Microsoft has already largely shifted its focus from the four-colored flag (as explained below) to the new cash generator for them called Azure.</p> The four-colored flag of Microsoft <p>Ever wondered what did the four colors in the Windows flag and Microsoft\u2019s new logo represent? In fact, each color is linked to a flagship product of Microsoft, as shown below.</p> Color Product  Red  Office  Green  Xbox  Blue  Windows  Yellow  Bing <p>As time moves on, the patience of developers is slowly wearing out, again. It\u2019s now a recurring pattern that Microsoft puts some great concepts out there, yet spends little efforts on it. The initial versions of Project Reunion were rough, to say it nicely. It worked for neither Win32 developers nor UWP developers, or was missing (sometimes basic/necessary) features, or was either too complicated or too expensive to adopt to, sometimes both. Developers are surprised to find out that even in Microsoft\u2019s own, flagship IDE, the familiar XAML editor does not feature a live UI preview (in which you can make modifications to widgets or at least preview what they may look like when the app is started) like before, whether with Win32 or UWP development. While someone may defend Microsoft as Project Reunion is still in its early days and just a beta, a \u201ctechnical preview\u201d not meant for production use. But on on March 29, 2021, it reached its first stable release, with a much more ambitious name called \u201cWindows App SDK\u201d, implying that this shall be the new, official paradigm for developing apps for Windows, instead of anything else. The new WinUI 3 framework is also shipped alongside WinAppSDK, featuring Microsoft\u2019s latest and greatest Fluent Design system.</p> <p>But as everyone could see, the Designer for WinUI 3 projects is now  still missing from Visual Studio, the shiny Acrylic and Mica materials from Windows 10 and 11 are finally added in 1.3, the years long  simple <code>StackPanel</code> bug is finally patched while this post is being composed, and developers are  questioning about its future.</p> <p>Personally, I still feel it as pretty much half-baked and broken. For small projects, the template is large with much boilerplate codes (10+ files) and added unnecessary complication. Most of those \u201chelpers\u201d can be part of the framework instead of being boilerplate.</p> <p>The biggest challenge for Microsoft is actually nothing about technologies, but rather real efforts put in to let developers trust them again. Microsoft\u2019s commitment issue has been the n\u00famero uno problem for them, as developers are running away to the much more reliable development platforms, like, the web, while unwilling to try out any technologies that Microsoft put out, afraid of being backstabbed with yet another Silverlight.</p>"},{"location":"2024/01/29/a-rant-about-the-consistency-of-windows/#conclusion","title":"Conclusion","text":"<p>Closing up, as of writing, the latest version of Windows is Windows 11, version 23H2, with rumors saying that Windows 12 may be on the horizon. But Windows is still a modern operating system with shattered historical relics spreading everywhere. You can see all kinds of UIs on Windows from Windows 3.1 all the way to the latest Windows 11. The file picker in \u201cODBC Data Sources\u201d is from Windows 3.1, the Aero Wizard UIs are from Windows Vista and 7, the checkboxes in the Home Ribbon of Windows 10\u2019s File Explorer are from Windows 8 and 8.1, and some UWP apps are targeting Windows 10 and using its version of Fluent UI on Windows 11. Not to mention the fact that Dark Mode introduced years ago is still broken for even system apps like Microsoft Management Console (like Device Manager and Event Viewer) and Control Panel (that still hasn\u2019t been completely replaced). If you want some nice laughs, see Xah Lee\u2019s hilarious summary .</p> <p>Luckily I recently found out that Microsoft actually used their own frameworks for once. Many system applications are receiving major revamps with WinUI on Windows 11, like Paint, Task Manager (although very janky but thankfully finally had dark mode support), and recently (and surprisingly) to the \u201cWindows Defender Firewall has blocked some features of this app\u201d popup (images via Windows Report ) as well.</p> <p></p> <p>See? It\u2019s not like Redmond can\u2019t do it, it\u2019s about if Redmond wants to do it. It is all about commitment. While having a decent platform is a great start, having people staying onboard is the utmost important thing for the ship to continue sailing on the vast ocean of technological endeavors.</p> <ol> <li> <p>See the Neowin report .\u00a0\u21a9</p> </li> <li> <p>Microsoft headquarters is located in Redmond, Washington, United States.\u00a0\u21a9</p> </li> <li> <p>You can still do it in IDE\u2019s designer when developing WPF applications, but it is no longer recommended.\u00a0\u21a9</p> </li> <li> <p>Years later in 2021, Intel\u2019s new CEO (also an Intel veteran), Pat Gelsinger reportedly said the quote in a report by The Verge . Referring to Apple Inc.\u00a0\u21a9</p> </li> <li> <p>Quote source: ZDNET report .\u00a0\u21a9</p> </li> <li> <p>See Linus Tech Tips\u2019 rant about Modern Standby:  Microsoft is Forcing me to Buy MacBooks - Windows Modern Standby.\u00a0\u21a9</p> </li> <li> <p>Per time of General Availability (GA), Windows 8 RTM (Released to Manufacturing) was earlier on August 1, 2012.\u00a0\u21a9</p> </li> <li> <p>Per Microsoft, Metro has always meant to be an internal codename only. Its other name, \u201cModern UI\u201d came from Microsoft executive Qi Lu on the MIXX conference . Later Microsoft confirmed (ZDNET report ) its official name as \u201cMicrosoft Design Language\u201d.\u00a0\u21a9</p> </li> <li> <p>Your milage may vary.\u00a0\u21a9</p> </li> <li> <p>While \u201cDesktop\u201d, as a Metro app, is closed, all Windows desktop applications and their windows remained open. You normally cannot return to desktop until you click or tap the Desktop tile in the Start Menu again. This adds another layer of confusion to users.\u00a0\u21a9</p> </li> <li> <p>Quote source:  Steve Jobs on Touch Screen PCs.\u00a0\u21a9</p> </li> <li> <p>At that time, Windows Store only offers packaged WinRT applications, packaged Win32 applications like what we have nowadays is not there until Windows 10.\u00a0\u21a9</p> </li> <li> <p>The statement, which aged well , was made by Microsoft employee Jerry Nixon at the 2015 Ignite Conference . But remains controversial  since it may be taken out of context by media or others.\u00a0\u21a9</p> </li> <li> <p>See Winaero\u2019s registry tweak  to bring it back.\u00a0\u21a9</p> </li> <li> <p>Fearing to break ancient software, when queried through Win32 APIs, the <code>10.0</code> version is only returned for apps that explicitly declared Windows 10 compatibility in their manifests, while for everyone else the NT kernel version of Windows 8.1 that is <code>6.3.9600</code> will be returned. If applications chose to retrieve version information through WMI (Windows Management Instrumentation), the actual version will be returned regardless of compatibility.\u00a0\u21a9</p> </li> <li> <p>Referring to Satya Nadella, Microsoft\u2019s new CEO after Steve Ballmer since February 2014.\u00a0\u21a9</p> </li> </ol>"},{"location":"archive/2024/","title":"2024","text":""},{"location":"archive/2023/","title":"2023","text":""},{"location":"category/development/","title":"Development","text":""},{"location":"category/history/","title":"History","text":""},{"location":"category/translation/","title":"Translation","text":""},{"location":"category/meta/","title":"Meta","text":""}]}